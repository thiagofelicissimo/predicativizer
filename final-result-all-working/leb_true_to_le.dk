def leb_true_to_le : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (eq.eq cts.zero bool.bool (leb.leb x x0) true.true)
             (x1 => le.le x x0))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  leb_elim.leb_elim
    cts.zero
    n
    m
    (__:(cts.Term cts.zero bool.bool) =>
     cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       (eq.eq cts.zero bool.bool __ true.true)
       (x => le.le n m))
    (auto:(cts.Term cts.zero (le.le n m)) =>
     auto':(cts.Term
              cts.zero
              (eq.eq cts.zero bool.bool true.true true.true)) =>
     auto)
    (__:(cts.Term cts.zero (Not.Not (le.le n m))) =>
     abs:(cts.Term
            cts.zero
            (eq.eq cts.zero bool.bool false.false true.true)) =>
     falsity.falsity
       cts.zero
       (le.le n m)
       (absurd.absurd
          (eq.eq cts.zero bool.bool true.true false.false)
          (rewrite_r.rewrite_r
             cts.zero
             cts.zero
             bool.bool
             true.true
             (__1:(cts.Term cts.zero bool.bool) =>
              eq.eq cts.zero bool.bool true.true __1)
             (refl.refl cts.zero bool.bool true.true)
             false.false
             abs)
          not_eq_true_false.not_eq_true_false)).

