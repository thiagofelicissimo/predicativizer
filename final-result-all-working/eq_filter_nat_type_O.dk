def eq_filter_nat_type_O :  (l?13 : cts.Sort) -> (l?6 : cts.Sort) ->
  cts.Term
    (cts.max (cts.succ l?6) (cts.max l?6 (cts.max (cts.max l?6 (cts.succ l?13)) l?13)))
    (cts.prod
       (cts.succ l?6)
       (cts.max l?6 (cts.max (cts.max l?6 (cts.succ l?13)) l?13))
       (cts.max (cts.succ l?6) (cts.max l?6 (cts.max (cts.max l?6 (cts.succ l?13)) l?13)))
       cts.I
       (cts.univ l?6 (cts.succ l?6) cts.I)
       (x =>
        cts.prod
          l?6
          (cts.max (cts.max l?6 (cts.succ l?13)) l?13)
          (cts.max l?6 (cts.max (cts.max l?6 (cts.succ l?13)) l?13))
          cts.I
          (cts.prod
             cts.zero
             l?6
             l?6
             cts.I
             nat.nat
             (x0 => x))
          (x0 =>
           leibniz.leibniz
             l?6
             l?13
             x
             (filter_nat_type.filter_nat_type l?6 x x0 O.O)
             (x0 O.O))))
  := l?13 => l?6 =>
  return_type:(cts.Term
                 (cts.succ l?6)
                 (cts.univ l?6 (cts.succ l?6) cts.I)) =>
  return:(cts.Term
            l?6
            (cts.prod
               cts.zero
               l?6
               l?6
               cts.I
               nat.nat
               (x => return_type))) =>
  equal_leibniz.equal_leibniz
    l?6
    l?13
    return_type
    (filter_nat_type.filter_nat_type l?6 return_type return O.O)
    (return O.O)
    (axiom_filter_nat_type_O.axiom_filter_nat_type_O l?6 return_type return).

