def not_to_not : 
  cts.Term
    (cts.succ cts.zero)
    (cts.prod
       (cts.succ cts.zero)
       (cts.succ cts.zero)
       (cts.succ cts.zero)
       cts.I
       (cts.univ cts.zero (cts.succ cts.zero) cts.I)
       (x =>
        cts.prod
          (cts.succ cts.zero)
          cts.zero
          (cts.succ cts.zero)
          cts.I
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                x
                (x1 => x0))
             (x1 =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (Not.Not x0)
                (x2 => Not.Not x)))))
  :=
  A:(cts.Term (cts.succ cts.zero) (cts.univ cts.zero (cts.succ cts.zero) cts.I)) =>
  B:(cts.Term (cts.succ cts.zero) (cts.univ cts.zero (cts.succ cts.zero) cts.I)) =>
  auto:(cts.Term
          cts.zero
          (cts.prod cts.zero cts.zero cts.zero cts.I A (x => B))) =>
  auto':(cts.Term cts.zero (Not.Not B)) =>
  nmk.nmk A (auto'':(cts.Term cts.zero A) => absurd.absurd B (auto auto'') auto').

