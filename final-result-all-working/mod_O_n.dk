def mod_O_n : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x => eq.eq cts.zero nat.nat (mod.mod O.O x) O.O))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  sym_eq.sym_eq
    cts.zero
    nat.nat
    O.O
    (mod.mod O.O n)
    (eq_coerc.eq_coerc
       cts.zero
       (eq.eq cts.zero nat.nat O.O (mod.mod O.O n))
       (eq.eq cts.zero nat.nat O.O (mod.mod O.O n))
       (le_n_O_to_eq.le_n_O_to_eq
          (mod.mod O.O n)
          (eq_coerc.eq_coerc
             cts.zero
             (le.le
                (minus.minus
                   (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n)))
                   (plus.plus O.O (times.times n (div.div O.O n))))
                (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n))))
             (le.le (mod.mod O.O n) O.O)
             (minus_le.minus_le
                (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n)))
                (plus.plus O.O (times.times n (div.div O.O n))))
             (rewrite_r.rewrite_r
                (cts.succ cts.zero)
                cts.zero
                nat.nat
                (minus.minus (mod.mod O.O n) O.O)
                (__:(cts.Term cts.zero nat.nat) =>
                 eq.eq
                   (cts.succ cts.zero)
                   (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                   (le.le __ (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n))))
                   (le.le (mod.mod O.O n) O.O))
                (rewrite_l.rewrite_l
                   (cts.succ cts.zero)
                   cts.zero
                   nat.nat
                   (mod.mod O.O n)
                   (__:(cts.Term cts.zero nat.nat) =>
                    eq.eq
                      (cts.succ cts.zero)
                      (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                      (le.le __ (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n))))
                      (le.le (mod.mod O.O n) O.O))
                   (rewrite_l.rewrite_l
                      (cts.succ cts.zero)
                      cts.zero
                      nat.nat
                      O.O
                      (__:(cts.Term cts.zero nat.nat) =>
                       eq.eq
                         (cts.succ cts.zero)
                         (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                         (le.le (mod.mod O.O n) __)
                         (le.le (mod.mod O.O n) O.O))
                      (refl.refl
                         (cts.succ cts.zero)
                         (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                         (le.le (mod.mod O.O n) O.O))
                      (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n)))
                      (rewrite_l.rewrite_l
                         cts.zero
                         cts.zero
                         nat.nat
                         (plus.plus (times.times n (div.div O.O n)) (mod.mod O.O n))
                         (__:(cts.Term cts.zero nat.nat) =>
                          eq.eq cts.zero nat.nat O.O __)
                         (rewrite_l.rewrite_l
                            cts.zero
                            cts.zero
                            nat.nat
                            (times.times (div.div O.O n) n)
                            (__:(cts.Term cts.zero nat.nat) =>
                             eq.eq
                               cts.zero
                               nat.nat
                               O.O
                               (plus.plus __ (mod.mod O.O n)))
                            (div_mod.div_mod O.O n)
                            (times.times n (div.div O.O n))
                            (commutative_times.commutative_times (div.div O.O n) n))
                         (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n)))
                         (commutative_plus.commutative_plus
                            (times.times n (div.div O.O n))
                            (mod.mod O.O n))))
                   (minus.minus (mod.mod O.O n) O.O)
                   (minus_n_O.minus_n_O (mod.mod O.O n)))
                (minus.minus
                   (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n)))
                   (plus.plus O.O (times.times n (div.div O.O n))))
                (minus_plus_plus_l.minus_plus_plus_l
                   (mod.mod O.O n)
                   O.O
                   (times.times n (div.div O.O n))))))
       (refl.refl
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (eq.eq cts.zero nat.nat O.O (mod.mod O.O n)))).

