def congruent : 
  cts.Term
    (cts.succ cts.zero)
    (cts.prod
       cts.zero
       (cts.succ cts.zero)
       (cts.succ cts.zero)
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          (cts.succ cts.zero)
          (cts.succ cts.zero)
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             (cts.succ cts.zero)
             (cts.succ cts.zero)
             cts.I
             nat.nat
             (x1 => cts.univ cts.zero (cts.succ cts.zero) cts.I))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  p:(cts.Term cts.zero nat.nat) =>
  eq.eq cts.zero nat.nat (mod.mod n p) (mod.mod m p).

