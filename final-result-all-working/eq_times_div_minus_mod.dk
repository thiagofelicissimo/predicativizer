def eq_times_div_minus_mod : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           eq.eq
             cts.zero
             nat.nat
             (times.times (div.div x x0) x0)
             (minus.minus x (mod.mod x x0)))))
  :=
  a:(cts.Term cts.zero nat.nat) =>
  b:(cts.Term cts.zero nat.nat) =>
  eq_coerc.eq_coerc
    cts.zero
    (eq.eq
       cts.zero
       nat.nat
       (times.times b (div.div a b))
       (minus.minus (plus.plus (times.times b (div.div a b)) (mod.mod a b)) (mod.mod a b)))
    (eq.eq
       cts.zero
       nat.nat
       (times.times (div.div a b) b)
       (minus.minus a (mod.mod a b)))
    (minus_plus_m_m.minus_plus_m_m (times.times b (div.div a b)) (mod.mod a b))
    (rewrite_r.rewrite_r
       (cts.succ cts.zero)
       cts.zero
       nat.nat
       (plus.plus (mod.mod a b) (times.times b (div.div a b)))
       (__:(cts.Term cts.zero nat.nat) =>
        eq.eq
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (eq.eq
             cts.zero
             nat.nat
             (times.times b (div.div a b))
             (minus.minus __ (mod.mod a b)))
          (eq.eq
             cts.zero
             nat.nat
             (times.times (div.div a b) b)
             (minus.minus a (mod.mod a b))))
       (rewrite_r.rewrite_r
          (cts.succ cts.zero)
          cts.zero
          nat.nat
          (times.times b (div.div a b))
          (__:(cts.Term cts.zero nat.nat) =>
           eq.eq
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (eq.eq
                cts.zero
                nat.nat
                (times.times b (div.div a b))
                (minus.minus
                   (plus.plus (mod.mod a b) (times.times b (div.div a b)))
                   (mod.mod a b)))
             (eq.eq cts.zero nat.nat __ (minus.minus a (mod.mod a b))))
          (rewrite_l.rewrite_l
             (cts.succ cts.zero)
             cts.zero
             nat.nat
             a
             (__:(cts.Term cts.zero nat.nat) =>
              eq.eq
                (cts.succ cts.zero)
                (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                (eq.eq
                   cts.zero
                   nat.nat
                   (times.times b (div.div a b))
                   (minus.minus __ (mod.mod a b)))
                (eq.eq
                   cts.zero
                   nat.nat
                   (times.times b (div.div a b))
                   (minus.minus a (mod.mod a b))))
             (refl.refl
                (cts.succ cts.zero)
                (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                (eq.eq
                   cts.zero
                   nat.nat
                   (times.times b (div.div a b))
                   (minus.minus a (mod.mod a b))))
             (plus.plus (mod.mod a b) (times.times b (div.div a b)))
             (rewrite_l.rewrite_l
                cts.zero
                cts.zero
                nat.nat
                (plus.plus (times.times b (div.div a b)) (mod.mod a b))
                (__:(cts.Term cts.zero nat.nat) =>
                 eq.eq cts.zero nat.nat a __)
                (rewrite_l.rewrite_l
                   cts.zero
                   cts.zero
                   nat.nat
                   (times.times (div.div a b) b)
                   (__:(cts.Term cts.zero nat.nat) =>
                    eq.eq cts.zero nat.nat a (plus.plus __ (mod.mod a b)))
                   (div_mod.div_mod a b)
                   (times.times b (div.div a b))
                   (commutative_times.commutative_times (div.div a b) b))
                (plus.plus (mod.mod a b) (times.times b (div.div a b)))
                (commutative_plus.commutative_plus (times.times b (div.div a b)) (mod.mod a b))))
          (times.times (div.div a b) b)
          (commutative_times.commutative_times (div.div a b) b))
       (plus.plus (times.times b (div.div a b)) (mod.mod a b))
       (commutative_plus.commutative_plus (times.times b (div.div a b)) (mod.mod a b))).

