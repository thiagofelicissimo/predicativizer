def leb_elim :  (l?8 : cts.Sort) ->
  cts.Term
    (cts.succ l?8)
    (cts.prod
       cts.zero
       (cts.succ l?8)
       (cts.succ l?8)
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          (cts.succ l?8)
          (cts.succ l?8)
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             (cts.succ l?8)
             l?8
             (cts.succ l?8)
             cts.I
             (cts.prod
                cts.zero
                (cts.succ l?8)
                (cts.succ l?8)
                cts.I
                bool.bool
                (x1 => cts.univ l?8 (cts.succ l?8) cts.I))
             (x1 =>
              cts.prod
                l?8
                l?8
                l?8
                cts.I
                (cts.prod
                   cts.zero
                   l?8
                   l?8
                   cts.I
                   (le.le x x0)
                   (x2 => x1 true.true))
                (x2 =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (Not.Not (le.le x x0))
                      (x3 => x1 false.false))
                   (x3 => x1 (leb.leb x x0)))))))
  := l?8 =>
  nat_elim2.nat_elim2
    (cts.succ l?8)
    (__:(cts.Term cts.zero nat.nat) =>
     _0:(cts.Term cts.zero nat.nat) =>
     cts.prod
       (cts.succ l?8)
       l?8
       (cts.succ l?8)
       cts.I
       (cts.prod
          cts.zero
          (cts.succ l?8)
          (cts.succ l?8)
          cts.I
          bool.bool
          (x => cts.univ l?8 (cts.succ l?8) cts.I))
       (x =>
        cts.prod
          l?8
          l?8
          l?8
          cts.I
          (cts.prod
             cts.zero
             l?8
             l?8
             cts.I
             (le.le __ _0)
             (x0 => x true.true))
          (x0 =>
           cts.prod
             l?8
             l?8
             l?8
             cts.I
             (cts.prod
                cts.zero
                l?8
                l?8
                cts.I
                (Not.Not (le.le __ _0))
                (x1 => x false.false))
             (x1 => x (leb.leb __ _0)))))
    (n:(cts.Term cts.zero nat.nat) =>
     sym_eq_leb.sym_eq_leb
       (cts.succ l?8)
       O.O
       (y:(cts.Term
             cts.zero
             (cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                nat.nat
                (x => bool.bool))) =>
        cts.prod
          (cts.succ l?8)
          l?8
          (cts.succ l?8)
          cts.I
          (cts.prod
             cts.zero
             (cts.succ l?8)
             (cts.succ l?8)
             cts.I
             bool.bool
             (x => cts.univ l?8 (cts.succ l?8) cts.I))
          (x =>
           cts.prod
             l?8
             l?8
             l?8
             cts.I
             (cts.prod
                cts.zero
                l?8
                l?8
                cts.I
                (le.le O.O n)
                (x0 => x true.true))
             (x0 =>
              cts.prod
                l?8
                l?8
                l?8
                cts.I
                (cts.prod
                   cts.zero
                   l?8
                   l?8
                   cts.I
                   (Not.Not (le.le O.O n))
                   (x1 => x false.false))
                (x1 => x (y n)))))
       (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O
          (cts.succ l?8)
          cts.zero
          (cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             nat.nat
             (x => bool.bool))
          leb_body.leb_body
          (y:(cts.Term
                cts.zero
                (cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   nat.nat
                   (x => bool.bool))) =>
           cts.prod
             (cts.succ l?8)
             l?8
             (cts.succ l?8)
             cts.I
             (cts.prod
                cts.zero
                (cts.succ l?8)
                (cts.succ l?8)
                cts.I
                bool.bool
                (x => cts.univ l?8 (cts.succ l?8) cts.I))
             (x =>
              cts.prod
                l?8
                l?8
                l?8
                cts.I
                (cts.prod
                   cts.zero
                   l?8
                   l?8
                   cts.I
                   (le.le O.O n)
                   (x0 => x true.true))
                (x0 =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (Not.Not (le.le O.O n))
                      (x1 => x false.false))
                   (x1 => x (y n)))))
          (sym_eq_leb_body_O.sym_eq_leb_body_O
             (cts.succ l?8)
             (y:(cts.Term
                   cts.zero
                   (cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      nat.nat
                      (x => bool.bool))) =>
              cts.prod
                (cts.succ l?8)
                l?8
                (cts.succ l?8)
                cts.I
                (cts.prod
                   cts.zero
                   (cts.succ l?8)
                   (cts.succ l?8)
                   cts.I
                   bool.bool
                   (x => cts.univ l?8 (cts.succ l?8) cts.I))
                (x =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (le.le O.O n)
                      (x0 => x true.true))
                   (x0 =>
                    cts.prod
                      l?8
                      l?8
                      l?8
                      cts.I
                      (cts.prod
                         cts.zero
                         l?8
                         l?8
                         cts.I
                         (Not.Not (le.le O.O n))
                         (x1 => x false.false))
                      (x1 => x (y n)))))
             (P:(cts.Term
                   (cts.succ l?8)
                   (cts.prod
                      cts.zero
                      (cts.succ l?8)
                      (cts.succ l?8)
                      cts.I
                      bool.bool
                      (x => cts.univ l?8 (cts.succ l?8) cts.I))) =>
              auto:(cts.Term
                      l?8
                      (cts.prod
                         cts.zero
                         l?8
                         l?8
                         cts.I
                         (le.le O.O n)
                         (x => P true.true))) =>
              auto':(cts.Term
                       l?8
                       (cts.prod
                          cts.zero
                          l?8
                          l?8
                          cts.I
                          (Not.Not (le.le O.O n))
                          (x => P false.false))) =>
              auto (le_O_n.le_O_n n)))))
    (n:(cts.Term cts.zero nat.nat) =>
     sym_eq_leb.sym_eq_leb
       (cts.succ l?8)
       (S.S n)
       (y:(cts.Term
             cts.zero
             (cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                nat.nat
                (x => bool.bool))) =>
        cts.prod
          (cts.succ l?8)
          l?8
          (cts.succ l?8)
          cts.I
          (cts.prod
             cts.zero
             (cts.succ l?8)
             (cts.succ l?8)
             cts.I
             bool.bool
             (x => cts.univ l?8 (cts.succ l?8) cts.I))
          (x =>
           cts.prod
             l?8
             l?8
             l?8
             cts.I
             (cts.prod
                cts.zero
                l?8
                l?8
                cts.I
                (le.le (S.S n) O.O)
                (x0 => x true.true))
             (x0 =>
              cts.prod
                l?8
                l?8
                l?8
                cts.I
                (cts.prod
                   cts.zero
                   l?8
                   l?8
                   cts.I
                   (Not.Not (le.le (S.S n) O.O))
                   (x1 => x false.false))
                (x1 => x (y O.O)))))
       (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S
          (cts.succ l?8)
          cts.zero
          (cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             nat.nat
             (x => bool.bool))
          leb_body.leb_body
          n
          (y:(cts.Term
                cts.zero
                (cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   nat.nat
                   (x => bool.bool))) =>
           cts.prod
             (cts.succ l?8)
             l?8
             (cts.succ l?8)
             cts.I
             (cts.prod
                cts.zero
                (cts.succ l?8)
                (cts.succ l?8)
                cts.I
                bool.bool
                (x => cts.univ l?8 (cts.succ l?8) cts.I))
             (x =>
              cts.prod
                l?8
                l?8
                l?8
                cts.I
                (cts.prod
                   cts.zero
                   l?8
                   l?8
                   cts.I
                   (le.le (S.S n) O.O)
                   (x0 => x true.true))
                (x0 =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (Not.Not (le.le (S.S n) O.O))
                      (x1 => x false.false))
                   (x1 => x (y O.O)))))
          (sym_eq_leb_body_S.sym_eq_leb_body_S
             (cts.succ l?8)
             n
             (y:(cts.Term
                   cts.zero
                   (cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      nat.nat
                      (x => bool.bool))) =>
              cts.prod
                (cts.succ l?8)
                l?8
                (cts.succ l?8)
                cts.I
                (cts.prod
                   cts.zero
                   (cts.succ l?8)
                   (cts.succ l?8)
                   cts.I
                   bool.bool
                   (x => cts.univ l?8 (cts.succ l?8) cts.I))
                (x =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (le.le (S.S n) O.O)
                      (x0 => x true.true))
                   (x0 =>
                    cts.prod
                      l?8
                      l?8
                      l?8
                      cts.I
                      (cts.prod
                         cts.zero
                         l?8
                         l?8
                         cts.I
                         (Not.Not (le.le (S.S n) O.O))
                         (x1 => x false.false))
                      (x1 => x (y O.O)))))
             (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O
                (cts.succ l?8)
                cts.zero
                bool.bool
                false.false
                (q:(cts.Term cts.zero nat.nat) => leb.leb n q)
                (y:(cts.Term cts.zero bool.bool) =>
                 cts.prod
                   (cts.succ l?8)
                   l?8
                   (cts.succ l?8)
                   cts.I
                   (cts.prod
                      cts.zero
                      (cts.succ l?8)
                      (cts.succ l?8)
                      cts.I
                      bool.bool
                      (x => cts.univ l?8 (cts.succ l?8) cts.I))
                   (x =>
                    cts.prod
                      l?8
                      l?8
                      l?8
                      cts.I
                      (cts.prod
                         cts.zero
                         l?8
                         l?8
                         cts.I
                         (le.le (S.S n) O.O)
                         (x0 => x true.true))
                      (x0 =>
                       cts.prod
                         l?8
                         l?8
                         l?8
                         cts.I
                         (cts.prod
                            cts.zero
                            l?8
                            l?8
                            cts.I
                            (Not.Not (le.le (S.S n) O.O))
                            (x1 => x false.false))
                         (x1 => x y))))
                (P:(cts.Term
                      (cts.succ l?8)
                      (cts.prod
                         cts.zero
                         (cts.succ l?8)
                         (cts.succ l?8)
                         cts.I
                         bool.bool
                         (x => cts.univ l?8 (cts.succ l?8) cts.I))) =>
                 auto:(cts.Term
                         l?8
                         (cts.prod
                            cts.zero
                            l?8
                            l?8
                            cts.I
                            (le.le (S.S n) O.O)
                            (x => P true.true))) =>
                 auto':(cts.Term
                          l?8
                          (cts.prod
                             cts.zero
                             l?8
                             l?8
                             cts.I
                             (Not.Not (le.le (S.S n) O.O))
                             (x => P false.false))) =>
                 auto' (not_le_Sn_O.not_le_Sn_O n))))))
    (n:(cts.Term cts.zero nat.nat) =>
     m:(cts.Term cts.zero nat.nat) =>
     sym_eq_leb.sym_eq_leb
       (cts.succ l?8)
       (S.S n)
       (y:(cts.Term
             cts.zero
             (cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                nat.nat
                (x => bool.bool))) =>
        cts.prod
          (cts.succ l?8)
          (cts.succ l?8)
          (cts.succ l?8)
          cts.I
          (cts.prod
             (cts.succ l?8)
             l?8
             (cts.succ l?8)
             cts.I
             (cts.prod
                cts.zero
                (cts.succ l?8)
                (cts.succ l?8)
                cts.I
                bool.bool
                (x => cts.univ l?8 (cts.succ l?8) cts.I))
             (x =>
              cts.prod
                l?8
                l?8
                l?8
                cts.I
                (cts.prod
                   cts.zero
                   l?8
                   l?8
                   cts.I
                   (le.le n m)
                   (x0 => x true.true))
                (x0 =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (Not.Not (le.le n m))
                      (x1 => x false.false))
                   (x1 => x (leb.leb n m)))))
          (x =>
           cts.prod
             (cts.succ l?8)
             l?8
             (cts.succ l?8)
             cts.I
             (cts.prod
                cts.zero
                (cts.succ l?8)
                (cts.succ l?8)
                cts.I
                bool.bool
                (x0 => cts.univ l?8 (cts.succ l?8) cts.I))
             (x0 =>
              cts.prod
                l?8
                l?8
                l?8
                cts.I
                (cts.prod
                   cts.zero
                   l?8
                   l?8
                   cts.I
                   (le.le (S.S n) (S.S m))
                   (x1 => x0 true.true))
                (x1 =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (Not.Not (le.le (S.S n) (S.S m)))
                      (x2 => x0 false.false))
                   (x2 => x0 (y (S.S m)))))))
       (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S
          (cts.succ l?8)
          cts.zero
          (cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             nat.nat
             (x => bool.bool))
          leb_body.leb_body
          n
          (y:(cts.Term
                cts.zero
                (cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   nat.nat
                   (x => bool.bool))) =>
           cts.prod
             (cts.succ l?8)
             (cts.succ l?8)
             (cts.succ l?8)
             cts.I
             (cts.prod
                (cts.succ l?8)
                l?8
                (cts.succ l?8)
                cts.I
                (cts.prod
                   cts.zero
                   (cts.succ l?8)
                   (cts.succ l?8)
                   cts.I
                   bool.bool
                   (x => cts.univ l?8 (cts.succ l?8) cts.I))
                (x =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (le.le n m)
                      (x0 => x true.true))
                   (x0 =>
                    cts.prod
                      l?8
                      l?8
                      l?8
                      cts.I
                      (cts.prod
                         cts.zero
                         l?8
                         l?8
                         cts.I
                         (Not.Not (le.le n m))
                         (x1 => x false.false))
                      (x1 => x (leb.leb n m)))))
             (x =>
              cts.prod
                (cts.succ l?8)
                l?8
                (cts.succ l?8)
                cts.I
                (cts.prod
                   cts.zero
                   (cts.succ l?8)
                   (cts.succ l?8)
                   cts.I
                   bool.bool
                   (x0 => cts.univ l?8 (cts.succ l?8) cts.I))
                (x0 =>
                 cts.prod
                   l?8
                   l?8
                   l?8
                   cts.I
                   (cts.prod
                      cts.zero
                      l?8
                      l?8
                      cts.I
                      (le.le (S.S n) (S.S m))
                      (x1 => x0 true.true))
                   (x1 =>
                    cts.prod
                      l?8
                      l?8
                      l?8
                      cts.I
                      (cts.prod
                         cts.zero
                         l?8
                         l?8
                         cts.I
                         (Not.Not (le.le (S.S n) (S.S m)))
                         (x2 => x0 false.false))
                      (x2 => x0 (y (S.S m)))))))
          (sym_eq_leb_body_S.sym_eq_leb_body_S
             (cts.succ l?8)
             n
             (y:(cts.Term
                   cts.zero
                   (cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      nat.nat
                      (x => bool.bool))) =>
              cts.prod
                (cts.succ l?8)
                (cts.succ l?8)
                (cts.succ l?8)
                cts.I
                (cts.prod
                   (cts.succ l?8)
                   l?8
                   (cts.succ l?8)
                   cts.I
                   (cts.prod
                      cts.zero
                      (cts.succ l?8)
                      (cts.succ l?8)
                      cts.I
                      bool.bool
                      (x => cts.univ l?8 (cts.succ l?8) cts.I))
                   (x =>
                    cts.prod
                      l?8
                      l?8
                      l?8
                      cts.I
                      (cts.prod
                         cts.zero
                         l?8
                         l?8
                         cts.I
                         (le.le n m)
                         (x0 => x true.true))
                      (x0 =>
                       cts.prod
                         l?8
                         l?8
                         l?8
                         cts.I
                         (cts.prod
                            cts.zero
                            l?8
                            l?8
                            cts.I
                            (Not.Not (le.le n m))
                            (x1 => x false.false))
                         (x1 => x (leb.leb n m)))))
                (x =>
                 cts.prod
                   (cts.succ l?8)
                   l?8
                   (cts.succ l?8)
                   cts.I
                   (cts.prod
                      cts.zero
                      (cts.succ l?8)
                      (cts.succ l?8)
                      cts.I
                      bool.bool
                      (x0 => cts.univ l?8 (cts.succ l?8) cts.I))
                   (x0 =>
                    cts.prod
                      l?8
                      l?8
                      l?8
                      cts.I
                      (cts.prod
                         cts.zero
                         l?8
                         l?8
                         cts.I
                         (le.le (S.S n) (S.S m))
                         (x1 => x0 true.true))
                      (x1 =>
                       cts.prod
                         l?8
                         l?8
                         l?8
                         cts.I
                         (cts.prod
                            cts.zero
                            l?8
                            l?8
                            cts.I
                            (Not.Not (le.le (S.S n) (S.S m)))
                            (x2 => x0 false.false))
                         (x2 => x0 (y (S.S m)))))))
             (sym_eq_match_nat_type_S.sym_eq_match_nat_type_S
                (cts.succ l?8)
                cts.zero
                bool.bool
                false.false
                (q:(cts.Term cts.zero nat.nat) => leb.leb n q)
                m
                (y:(cts.Term cts.zero bool.bool) =>
                 cts.prod
                   (cts.succ l?8)
                   (cts.succ l?8)
                   (cts.succ l?8)
                   cts.I
                   (cts.prod
                      (cts.succ l?8)
                      l?8
                      (cts.succ l?8)
                      cts.I
                      (cts.prod
                         cts.zero
                         (cts.succ l?8)
                         (cts.succ l?8)
                         cts.I
                         bool.bool
                         (x => cts.univ l?8 (cts.succ l?8) cts.I))
                      (x =>
                       cts.prod
                         l?8
                         l?8
                         l?8
                         cts.I
                         (cts.prod
                            cts.zero
                            l?8
                            l?8
                            cts.I
                            (le.le n m)
                            (x0 => x true.true))
                         (x0 =>
                          cts.prod
                            l?8
                            l?8
                            l?8
                            cts.I
                            (cts.prod
                               cts.zero
                               l?8
                               l?8
                               cts.I
                               (Not.Not (le.le n m))
                               (x1 => x false.false))
                            (x1 => x (leb.leb n m)))))
                   (x =>
                    cts.prod
                      (cts.succ l?8)
                      l?8
                      (cts.succ l?8)
                      cts.I
                      (cts.prod
                         cts.zero
                         (cts.succ l?8)
                         (cts.succ l?8)
                         cts.I
                         bool.bool
                         (x0 => cts.univ l?8 (cts.succ l?8) cts.I))
                      (x0 =>
                       cts.prod
                         l?8
                         l?8
                         l?8
                         cts.I
                         (cts.prod
                            cts.zero
                            l?8
                            l?8
                            cts.I
                            (le.le (S.S n) (S.S m))
                            (x1 => x0 true.true))
                         (x1 =>
                          cts.prod
                            l?8
                            l?8
                            l?8
                            cts.I
                            (cts.prod
                               cts.zero
                               l?8
                               l?8
                               cts.I
                               (Not.Not (le.le (S.S n) (S.S m)))
                               (x2 => x0 false.false))
                            (x2 => x0 y)))))
                (Hind:(cts.Term
                         (cts.succ l?8)
                         (cts.prod
                            (cts.succ l?8)
                            l?8
                            (cts.succ l?8)
                            cts.I
                            (cts.prod
                               cts.zero
                               (cts.succ l?8)
                               (cts.succ l?8)
                               cts.I
                               bool.bool
                               (x => cts.univ l?8 (cts.succ l?8) cts.I))
                            (x =>
                             cts.prod
                               l?8
                               l?8
                               l?8
                               cts.I
                               (cts.prod
                                  cts.zero
                                  l?8
                                  l?8
                                  cts.I
                                  (le.le n m)
                                  (x0 => x true.true))
                               (x0 =>
                                cts.prod
                                  l?8
                                  l?8
                                  l?8
                                  cts.I
                                  (cts.prod
                                     cts.zero
                                     l?8
                                     l?8
                                     cts.I
                                     (Not.Not (le.le n m))
                                     (x1 => x false.false))
                                  (x1 => x (leb.leb n m)))))) =>
                 P:(cts.Term
                      (cts.succ l?8)
                      (cts.prod
                         cts.zero
                         (cts.succ l?8)
                         (cts.succ l?8)
                         cts.I
                         bool.bool
                         (x => cts.univ l?8 (cts.succ l?8) cts.I))) =>
                 Pt:(cts.Term
                       l?8
                       (cts.prod
                          cts.zero
                          l?8
                          l?8
                          cts.I
                          (le.le (S.S n) (S.S m))
                          (x => P true.true))) =>
                 Pf:(cts.Term
                       l?8
                       (cts.prod
                          cts.zero
                          l?8
                          l?8
                          cts.I
                          (Not.Not (le.le (S.S n) (S.S m)))
                          (x => P false.false))) =>
                 Hind
                   P
                   (lenm:(cts.Term cts.zero (le.le n m)) =>
                    Pt (le_S_S.le_S_S n m lenm))
                   (nlenm:(cts.Term cts.zero (Not.Not (le.le n m))) =>
                    Pf (not_le_to_not_le_S_S.not_le_to_not_le_S_S n m nlenm))))))).

