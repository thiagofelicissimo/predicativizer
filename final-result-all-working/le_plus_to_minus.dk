def le_plus_to_minus : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (le.le x (plus.plus x1 x0))
                (x2 => le.le (minus.minus x x0) x1)))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  p:(cts.Term cts.zero nat.nat) =>
  lep:(cts.Term cts.zero (le.le n (plus.plus p m))) =>
  eq_coerc.eq_coerc
    cts.zero
    (le.le (minus.minus n m) (minus.minus (plus.plus p m) m))
    (le.le (minus.minus n m) p)
    (monotonic_le_minus_l.monotonic_le_minus_l (plus.plus p m) n m lep)
    (rewrite_l.rewrite_l
       (cts.succ cts.zero)
       cts.zero
       nat.nat
       p
       (__:(cts.Term cts.zero nat.nat) =>
        eq.eq
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (le.le (minus.minus n m) __)
          (le.le (minus.minus n m) p))
       (refl.refl
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (le.le (minus.minus n m) p))
       (minus.minus (plus.plus p m) m)
       (minus_plus_m_m.minus_plus_m_m p m)).

