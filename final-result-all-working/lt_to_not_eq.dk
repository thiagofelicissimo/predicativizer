def lt_to_not_eq : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (lt.lt x x0)
             (x1 => Not.Not (eq.eq cts.zero nat.nat x x0)))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  H:(cts.Term cts.zero (lt.lt n m)) =>
  not_to_not.not_to_not
    (eq.eq cts.zero nat.nat n m)
    False.False
    (auto:(cts.Term cts.zero (eq.eq cts.zero nat.nat n m)) =>
     absurd.absurd
       (le.le (S.S n) n)
       (eq_coerc.eq_coerc
          cts.zero
          (le.le (S.S n) m)
          (le.le (S.S n) n)
          H
          (rewrite_l.rewrite_l
             (cts.succ cts.zero)
             cts.zero
             nat.nat
             n
             (__:(cts.Term cts.zero nat.nat) =>
              eq.eq
                (cts.succ cts.zero)
                (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                (le.le (S.S n) __)
                (le.le (S.S n) n))
             (refl.refl
                (cts.succ cts.zero)
                (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                (le.le (S.S n) n))
             m
             auto))
       (not_le_Sn_n.not_le_Sn_n n))
    (nmk.nmk False.False (auto:(cts.Term cts.zero False.False) => auto)).

