def monotonic_lt_plus_l : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        monotonic.monotonic
          cts.zero
          cts.zero
          nat.nat
          lt.lt
          (m:(cts.Term cts.zero nat.nat) => plus.plus m x)))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  x:(cts.Term cts.zero nat.nat) =>
  y:(cts.Term cts.zero nat.nat) =>
  auto:(cts.Term cts.zero (lt.lt x y)) =>
  eq_coerc.eq_coerc
    cts.zero
    (le.le (plus.plus n (S.S x)) (plus.plus n y))
    (le.le (S.S (plus.plus x n)) (plus.plus y n))
    (monotonic_le_plus_r.monotonic_le_plus_r n (S.S x) y auto)
    (rewrite_r.rewrite_r
       (cts.succ cts.zero)
       cts.zero
       nat.nat
       (plus.plus n x)
       (__:(cts.Term cts.zero nat.nat) =>
        eq.eq
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (le.le (plus.plus n (S.S x)) (plus.plus n y))
          (le.le (S.S __) (plus.plus y n)))
       (rewrite_r.rewrite_r
          (cts.succ cts.zero)
          cts.zero
          nat.nat
          (plus.plus n (S.S x))
          (__:(cts.Term cts.zero nat.nat) =>
           eq.eq
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (le.le (plus.plus n (S.S x)) (plus.plus n y))
             (le.le __ (plus.plus y n)))
          (rewrite_r.rewrite_r
             (cts.succ cts.zero)
             cts.zero
             nat.nat
             (plus.plus n y)
             (__:(cts.Term cts.zero nat.nat) =>
              eq.eq
                (cts.succ cts.zero)
                (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                (le.le (plus.plus n (S.S x)) (plus.plus n y))
                (le.le (plus.plus n (S.S x)) __))
             (refl.refl
                (cts.succ cts.zero)
                (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                (le.le (plus.plus n (S.S x)) (plus.plus n y)))
             (plus.plus y n)
             (commutative_plus.commutative_plus y n))
          (S.S (plus.plus n x))
          (plus_n_Sm.plus_n_Sm n x))
       (plus.plus x n)
       (commutative_plus.commutative_plus x n)).

