def eq_coerc :  (l?36 : cts.Sort) ->
  cts.Term
    (cts.succ l?36)
    (cts.prod
       (cts.succ l?36)
       (cts.succ l?36)
       (cts.succ l?36)
       cts.I
       (cts.univ l?36 (cts.succ l?36) cts.I)
       (x =>
        cts.prod
          (cts.succ l?36)
          (cts.succ l?36)
          (cts.succ l?36)
          cts.I
          (cts.univ l?36 (cts.succ l?36) cts.I)
          (x0 =>
           cts.prod
             l?36
             (cts.succ l?36)
             (cts.succ l?36)
             cts.I
             x
             (x1 =>
              cts.prod
                (cts.succ l?36)
                l?36
                (cts.succ l?36)
                cts.I
                (eq.eq
                   (cts.succ l?36)
                   (cts.univ l?36 (cts.succ l?36) cts.I)
                   x
                   x0)
                (x2 => x0)))))
  := l?36 =>
  A:(cts.Term (cts.succ l?36) (cts.univ l?36 (cts.succ l?36) cts.I)) =>
  B:(cts.Term (cts.succ l?36) (cts.univ l?36 (cts.succ l?36) cts.I)) =>
  Ha:(cts.Term l?36 A) =>
  Heq:(cts.Term
         (cts.succ l?36)
         (eq.eq (cts.succ l?36) (cts.univ l?36 (cts.succ l?36) cts.I) A B)) =>
  eq_ind.eq_ind
    l?36
    (cts.succ l?36)
    (cts.univ l?36 (cts.succ l?36) cts.I)
    A
    (x_19:(cts.Term (cts.succ l?36) (cts.univ l?36 (cts.succ l?36) cts.I)) => x_19)
    Ha
    B
    Heq.

