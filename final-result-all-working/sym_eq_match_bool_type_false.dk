def sym_eq_match_bool_type_false :  (l?13 : cts.Sort) -> (l?24 : cts.Sort) ->
  cts.Term
    (cts.max (cts.succ l?24) (cts.max l?24 (cts.max l?24 (cts.max (cts.max l?24 (cts.succ l?13)) l?13))))
    (cts.prod
       (cts.succ l?24)
       (cts.max l?24 (cts.max l?24 (cts.max (cts.max l?24 (cts.succ l?13)) l?13)))
       (cts.max (cts.succ l?24) (cts.max l?24 (cts.max l?24 (cts.max (cts.max l?24 (cts.succ l?13)) l?13))))
       cts.I
       (cts.univ l?24 (cts.succ l?24) cts.I)
       (x =>
        cts.prod
          l?24
          (cts.max l?24 (cts.max (cts.max l?24 (cts.succ l?13)) l?13))
          (cts.max l?24 (cts.max l?24 (cts.max (cts.max l?24 (cts.succ l?13)) l?13)))
          cts.I
          x
          (x0 =>
           cts.prod
             l?24
             (cts.max (cts.max l?24 (cts.succ l?13)) l?13)
             (cts.max l?24 (cts.max (cts.max l?24 (cts.succ l?13)) l?13))
             cts.I
             x
             (x1 =>
              leibniz.leibniz
                l?24
                l?13
                x
                x1
                (match_bool_type.match_bool_type
                   l?24
                   x
                   x0
                   x1
                   false.false)))))
  := l?13 => l?24 =>
  return:(cts.Term
            (cts.succ l?24)
            (cts.univ
               l?24
               (cts.succ l?24)
               cts.I)) =>
  case_true:(cts.Term l?24 return) =>
  case_false:(cts.Term l?24 return) =>
  sym_leibniz.sym_leibniz
    cts.zero
    l?24
    l?13
    return
    (match_bool_type.match_bool_type
       l?24
       return
       case_true
       case_false
       false.false)
    case_false
    (eq_match_bool_type_false.eq_match_bool_type_false
       cts.zero
       l?24
       return
       case_true
       case_false).

