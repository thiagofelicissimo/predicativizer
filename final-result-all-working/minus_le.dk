def minus_le : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 => le.le (minus.minus x x0) x)))
  :=
  x:(cts.Term cts.zero nat.nat) =>
  y:(cts.Term cts.zero nat.nat) =>
  eq_coerc.eq_coerc
    cts.zero
    (le.le (minus.minus x y) (minus.minus (plus.plus x y) y))
    (le.le (minus.minus x y) x)
    (monotonic_le_minus_l.monotonic_le_minus_l (plus.plus x y) x y (le_plus_n_r.le_plus_n_r y x))
    (rewrite_l.rewrite_l
       (cts.succ cts.zero)
       cts.zero
       nat.nat
       x
       (__:(cts.Term cts.zero nat.nat) =>
        eq.eq
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (le.le (minus.minus x y) __)
          (le.le (minus.minus x y) x))
       (refl.refl
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (le.le (minus.minus x y) x))
       (minus.minus (plus.plus x y) y)
       (minus_plus_m_m.minus_plus_m_m x y)).

