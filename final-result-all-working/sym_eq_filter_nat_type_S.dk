def sym_eq_filter_nat_type_S :  (l?16 : cts.Sort) -> (l?6 : cts.Sort) ->
  cts.Term
    (cts.max (cts.succ l?6) (cts.max l?6 (cts.max (cts.max l?6 (cts.succ l?16)) l?16)))
    (cts.prod
       (cts.succ l?6)
       (cts.max l?6 (cts.max (cts.max l?6 (cts.succ l?16)) l?16))
       (cts.max (cts.succ l?6) (cts.max l?6 (cts.max (cts.max l?6 (cts.succ l?16)) l?16)))
       cts.I
       (cts.univ l?6 (cts.succ l?6) cts.I)
       (x =>
        cts.prod
          l?6
          (cts.max (cts.max l?6 (cts.succ l?16)) l?16)
          (cts.max l?6 (cts.max (cts.max l?6 (cts.succ l?16)) l?16))
          cts.I
          (cts.prod
             cts.zero
             l?6
             l?6
             cts.I
             nat.nat
             (x0 => x))
          (x0 =>
           cts.prod
             cts.zero
             (cts.max (cts.max l?6 (cts.succ l?16)) l?16)
             (cts.max (cts.max l?6 (cts.succ l?16)) l?16)
             cts.I
             nat.nat
             (x1 =>
              leibniz.leibniz
                l?6
                l?16
                x
                (x0 (S.S x1))
                (filter_nat_type.filter_nat_type l?6 x x0 (S.S x1))))))
  := l?16 => l?6 =>
  return_type:(cts.Term
                 (cts.succ l?6)
                 (cts.univ
                    l?6
                    (cts.succ l?6)
                    cts.I)) =>
  return:(cts.Term
            l?6
            (cts.prod
               cts.zero
               l?6
               l?6
               cts.I
               nat.nat
               (x => return_type))) =>
  n:(cts.Term cts.zero nat.nat) =>
  sym_leibniz.sym_leibniz
    cts.zero
    l?6
    l?16
    return_type
    (filter_nat_type.filter_nat_type l?6 return_type return (S.S n))
    (return (S.S n))
    (eq_filter_nat_type_S.eq_filter_nat_type_S
       cts.zero
       l?6
       return_type
       return
       n).

