def dividesb_false_to_not_divides : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (eq.eq
                cts.zero
                bool.bool
                (dividesb.dividesb x x0)
                false.false)
             (x1 => Not.Not (divides.divides cts.zero x x0)))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  match_Or_prop.match_Or_prop
    (lt.lt O.O n)
    (eq.eq cts.zero nat.nat O.O n)
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       (eq.eq cts.zero bool.bool (dividesb.dividesb n m) false.false)
       (x => Not.Not (divides.divides cts.zero n m)))
    (posn:(cts.Term cts.zero (lt.lt O.O n)) =>
     ndivbnm:(cts.Term
                cts.zero
                (eq.eq
                   cts.zero
                   bool.bool
                   (dividesb.dividesb n m)
                   false.false)) =>
     not_to_not.not_to_not
       (divides.divides cts.zero n m)
       (eq.eq cts.zero nat.nat (mod.mod m n) O.O)
       (divides_to_mod_O.divides_to_mod_O cts.zero n m posn)
       (eqb_false_to_not_eq.eqb_false_to_not_eq (mod.mod m n) O.O ndivbnm))
    (eqnO:(cts.Term
             cts.zero
             (eq.eq cts.zero nat.nat O.O n)) =>
     eq_ind.eq_ind
       cts.zero
       cts.zero
       nat.nat
       O.O
       (x_1:(cts.Term cts.zero nat.nat) =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          (eq.eq
             cts.zero
             bool.bool
             (dividesb.dividesb x_1 m)
             false.false)
          (x => Not.Not (divides.divides cts.zero x_1 m)))
       (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O
          cts.zero
          cts.zero
          nat.nat
          m
          (p:(cts.Term cts.zero nat.nat) => mod_aux.mod_aux m m p)
          (y:(cts.Term cts.zero nat.nat) =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (eq.eq cts.zero bool.bool (eqb.eqb y O.O) false.false)
             (x => Not.Not (divides.divides cts.zero O.O m)))
          (nat_case.nat_case
             cts.zero
             m
             (__:(cts.Term cts.zero nat.nat) =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (eq.eq
                   cts.zero
                   bool.bool
                   (eqb.eqb __ O.O)
                   false.false)
                (x => Not.Not (divides.divides cts.zero O.O __)))
             (sym_eq_eqb.sym_eq_eqb
                cts.zero
                O.O
                (y:(cts.Term
                      cts.zero
                      (cts.prod
                         cts.zero
                         cts.zero
                         cts.zero
                         cts.I
                         nat.nat
                         (x => bool.bool))) =>
                 cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   (eq.eq cts.zero nat.nat m O.O)
                   (x =>
                    cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      (eq.eq
                         cts.zero
                         bool.bool
                         (y O.O)
                         false.false)
                      (x0 =>
                       Not.Not (divides.divides cts.zero O.O O.O))))
                (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O
                   cts.zero
                   cts.zero
                   (cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      nat.nat
                      (x => bool.bool))
                   eqb_body.eqb_body
                   (y:(cts.Term
                         cts.zero
                         (cts.prod
                            cts.zero
                            cts.zero
                            cts.zero
                            cts.I
                            nat.nat
                            (x => bool.bool))) =>
                    cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      (eq.eq cts.zero nat.nat m O.O)
                      (x =>
                       cts.prod
                         cts.zero
                         cts.zero
                         cts.zero
                         cts.I
                         (eq.eq
                            cts.zero
                            bool.bool
                            (y O.O)
                            false.false)
                         (x0 =>
                          Not.Not
                            (divides.divides cts.zero O.O O.O))))
                   (sym_eq_eqb_body_O.sym_eq_eqb_body_O
                      cts.zero
                      (y:(cts.Term
                            cts.zero
                            (cts.prod
                               cts.zero
                               cts.zero
                               cts.zero
                               cts.I
                               nat.nat
                               (x => bool.bool))) =>
                       cts.prod
                         cts.zero
                         cts.zero
                         cts.zero
                         cts.I
                         (eq.eq cts.zero nat.nat m O.O)
                         (x =>
                          cts.prod
                            cts.zero
                            cts.zero
                            cts.zero
                            cts.I
                            (eq.eq
                               cts.zero
                               bool.bool
                               (y O.O)
                               false.false)
                            (x0 =>
                             Not.Not
                               (divides.divides
                                  cts.zero
                                  O.O
                                  O.O))))
                      (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O
                         cts.zero
                         cts.zero
                         bool.bool
                         true.true
                         (q:(cts.Term cts.zero nat.nat) =>
                          false.false)
                         (y:(cts.Term cts.zero bool.bool) =>
                          cts.prod
                            cts.zero
                            cts.zero
                            cts.zero
                            cts.I
                            (eq.eq cts.zero nat.nat m O.O)
                            (x =>
                             cts.prod
                               cts.zero
                               cts.zero
                               cts.zero
                               cts.I
                               (eq.eq
                                  cts.zero
                                  bool.bool
                                  y
                                  false.false)
                               (x0 =>
                                Not.Not
                                  (divides.divides
                                     cts.zero
                                     O.O
                                     O.O))))
                         (auto:(cts.Term
                                  cts.zero
                                  (eq.eq
                                     cts.zero
                                     nat.nat
                                     m
                                     O.O)) =>
                          auto':(cts.Term
                                   cts.zero
                                   (eq.eq
                                      cts.zero
                                      bool.bool
                                      true.true
                                      false.false)) =>
                          not_to_not.not_to_not
                            (divides.divides cts.zero O.O O.O)
                            (eq.eq
                               cts.zero
                               bool.bool
                               true.true
                               false.false)
                            (auto'':(cts.Term
                                       cts.zero
                                       (divides.divides
                                          cts.zero
                                          O.O
                                          O.O)) =>
                             rewrite_l.rewrite_l
                               cts.zero
                               cts.zero
                               bool.bool
                               true.true
                               (__:(cts.Term
                                      cts.zero
                                      bool.bool) =>
                                eq.eq
                                  cts.zero
                                  bool.bool
                                  true.true
                                  __)
                               (refl.refl
                                  cts.zero
                                  bool.bool
                                  true.true)
                               false.false
                               auto')
                            not_eq_true_false.not_eq_true_false)))))
             (a:(cts.Term cts.zero nat.nat) =>
              __:(cts.Term
                    cts.zero
                    (eq.eq cts.zero nat.nat m (S.S a))) =>
              _0:(cts.Term
                    cts.zero
                    (eq.eq
                       cts.zero
                       bool.bool
                       (eqb.eqb (S.S a) O.O)
                       false.false)) =>
              nmk.nmk
                (divides.divides cts.zero O.O (S.S a))
                (_clearme:(cts.Term
                             cts.zero
                             (divides.divides
                                cts.zero
                                O.O
                                (S.S a))) =>
                 match_divides_prop.match_divides_prop
                   cts.zero
                   cts.zero
                   O.O
                   (S.S a)
                   False.False
                   (q:(cts.Term cts.zero nat.nat) =>
                    auto:(cts.Term
                            cts.zero
                            (eq.eq
                               cts.zero
                               nat.nat
                               (S.S a)
                               (times.times O.O q))) =>
                    absurd.absurd
                      (eq.eq cts.zero nat.nat O.O (S.S a))
                      (rewrite_r.rewrite_r
                         cts.zero
                         cts.zero
                         nat.nat
                         n
                         (__1:(cts.Term cts.zero nat.nat) =>
                          eq.eq cts.zero nat.nat __1 (S.S a))
                         (rewrite_l.rewrite_l
                            cts.zero
                            cts.zero
                            nat.nat
                            (S.S a)
                            (__1:(cts.Term cts.zero nat.nat) =>
                             eq.eq
                               cts.zero
                               nat.nat
                               __1
                               (S.S a))
                            (refl.refl
                               cts.zero
                               nat.nat
                               (S.S a))
                            n
                            (rewrite_l.rewrite_l
                               cts.zero
                               cts.zero
                               nat.nat
                               O.O
                               (__1:(cts.Term
                                       cts.zero
                                       nat.nat) =>
                                eq.eq
                                  cts.zero
                                  nat.nat
                                  (S.S a)
                                  __1)
                               (rewrite_r.rewrite_r
                                  cts.zero
                                  cts.zero
                                  nat.nat
                                  (times.times q O.O)
                                  (__1:(cts.Term
                                          cts.zero
                                          nat.nat) =>
                                   eq.eq
                                     cts.zero
                                     nat.nat
                                     (S.S a)
                                     __1)
                                  (rewrite_l.rewrite_l
                                     cts.zero
                                     cts.zero
                                     nat.nat
                                     (times.times O.O q)
                                     (__1:(cts.Term
                                             cts.zero
                                             nat.nat) =>
                                      eq.eq
                                        cts.zero
                                        nat.nat
                                        (S.S a)
                                        __1)
                                     auto
                                     (times.times q O.O)
                                     (commutative_times.commutative_times O.O q))
                                  O.O
                                  (times_n_O.times_n_O q))
                               n
                               eqnO))
                         O.O
                         eqnO)
                      (not_eq_O_S.not_eq_O_S a))
                   _clearme))))
       n
       eqnO)
    (le_to_or_lt_eq.le_to_or_lt_eq O.O n (le_O_n.le_O_n n)).

