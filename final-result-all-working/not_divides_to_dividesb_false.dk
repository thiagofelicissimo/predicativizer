def not_divides_to_dividesb_false :  (l?0 : cts.Sort) ->
  cts.Term
    l?0
    (cts.prod
       cts.zero
       l?0
       l?0
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          l?0
          l?0
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             l?0
             l?0
             cts.I
             (lt.lt O.O x)
             (x1 =>
              cts.prod
                l?0
                cts.zero
                l?0
                cts.I
                (Not.Not
                   l?0
                   (divides.divides l?0 x x0))
                (x2 =>
                 eq.eq
                   cts.zero
                   bool.bool
                   (dividesb.dividesb x x0)
                   false.false)))))
  := l?0 =>
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  posn:(cts.Term cts.zero (lt.lt O.O n)) =>
  match_Or_prop.match_Or_prop
    l?0
    cts.zero
    cts.zero
    cts.zero
    (eq.eq cts.zero bool.bool (dividesb.dividesb n m) true.true)
    (eq.eq cts.zero bool.bool (dividesb.dividesb n m) false.false)
    (cts.prod
       l?0
       cts.zero
       l?0
       cts.I
       (Not.Not
          l?0
          (divides.divides l?0 n m))
       (x =>
        eq.eq cts.zero bool.bool (dividesb.dividesb n m) false.false))
    (divbnm:(cts.Term
               cts.zero
               (eq.eq
                  cts.zero
                  bool.bool
                  (dividesb.dividesb n m)
                  true.true)) =>
     ndivnm:(cts.Term
               l?0
               (Not.Not
                  l?0
                  (divides.divides l?0 n m))) =>
     falsity.falsity
       cts.zero
       cts.zero
       (eq.eq cts.zero bool.bool (dividesb.dividesb n m) false.false)
       (absurd.absurd
          l?0
          cts.zero
          (divides.divides l?0 n m)
          (dividesb_true_to_divides.dividesb_true_to_divides
             l?0
             n
             m
             (rewrite_r.rewrite_r
                cts.zero
                cts.zero
                bool.bool
                true.true
                (__:(cts.Term cts.zero bool.bool) =>
                 eq.eq cts.zero bool.bool __ true.true)
                (refl.refl cts.zero bool.bool true.true)
                (dividesb.dividesb n m)
                divbnm))
          ndivnm))
    (auto:(cts.Term
             cts.zero
             (eq.eq
                cts.zero
                bool.bool
                (dividesb.dividesb n m)
                false.false)) =>
     auto':(cts.Term
              l?0
              (Not.Not
                 l?0
                 (divides.divides l?0 n m))) =>
     rewrite_r.rewrite_r
       cts.zero
       cts.zero
       bool.bool
       false.false
       (__:(cts.Term cts.zero bool.bool) =>
        eq.eq cts.zero bool.bool __ false.false)
       (refl.refl cts.zero bool.bool false.false)
       (dividesb.dividesb n m)
       auto)
    (true_or_false.true_or_false cts.zero (dividesb.dividesb n m)).

