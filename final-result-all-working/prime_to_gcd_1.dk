def prime_to_gcd_1 : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (prime.prime x)
             (x1 =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (Not.Not (divides.divides cts.zero x x0))
                (x2 => eq.eq cts.zero nat.nat (gcd.gcd x x0) (S.S O.O))))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  _clearme:(cts.Term cts.zero (prime.prime n)) =>
  match_And_prop.match_And_prop
    (lt.lt (S.S O.O) n)
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          (divides.divides cts.zero x n)
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (lt.lt (S.S O.O) x)
             (x1 => eq.eq cts.zero nat.nat x n))))
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       (Not.Not (divides.divides cts.zero n m))
       (x => eq.eq cts.zero nat.nat (gcd.gcd n m) (S.S O.O)))
    (lt1n:(cts.Term cts.zero (lt.lt (S.S O.O) n)) =>
     primen:(cts.Term
               cts.zero
               (cts.prod
                  cts.zero
                  cts.zero
                  cts.zero
                  cts.I
                  nat.nat
                  (x =>
                   cts.prod
                     cts.zero
                     cts.zero
                     cts.zero
                     cts.I
                     (divides.divides cts.zero x n)
                     (x0 =>
                      cts.prod
                        cts.zero
                        cts.zero
                        cts.zero
                        cts.I
                        (lt.lt (S.S O.O) x)
                        (x1 => eq.eq cts.zero nat.nat x n))))) =>
     ndivnm:(cts.Term
               cts.zero
               (Not.Not (divides.divides cts.zero n m))) =>
     le_to_le_to_eq.le_to_le_to_eq
       (gcd.gcd n m)
       (S.S O.O)
       (not_lt_to_le.not_lt_to_le
          (S.S O.O)
          (gcd.gcd n m)
          (not_to_not.not_to_not
             (lt.lt (S.S O.O) (gcd.gcd n m))
             (eq.eq cts.zero nat.nat (gcd.gcd n m) n)
             (primen (gcd.gcd n m) (divides_gcd_l.divides_gcd_l n m))
             (not_to_not.not_to_not
                (eq.eq cts.zero nat.nat (gcd.gcd n m) n)
                (divides.divides cts.zero n m)
                (auto:(cts.Term
                         cts.zero
                         (eq.eq cts.zero nat.nat (gcd.gcd n m) n)) =>
                 eq_coerc.eq_coerc
                   cts.zero
                   (divides.divides cts.zero (gcd.gcd n m) m)
                   (divides.divides cts.zero n m)
                   (divides_gcd_r.divides_gcd_r n m)
                   (rewrite_r.rewrite_r
                      (cts.succ cts.zero)
                      cts.zero
                      nat.nat
                      n
                      (__:(cts.Term cts.zero nat.nat) =>
                       eq.eq
                         (cts.succ cts.zero)
                         (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                         (divides.divides cts.zero __ m)
                         (divides.divides cts.zero n m))
                      (refl.refl
                         (cts.succ cts.zero)
                         (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                         (divides.divides cts.zero n m))
                      (gcd.gcd n m)
                      auto))
                ndivnm)))
       (lt_O_gcd.lt_O_gcd
          n
          m
          (not_eq_to_le_to_lt.not_eq_to_le_to_lt
             O.O
             m
             (not_to_not.not_to_not
                (eq.eq cts.zero nat.nat O.O m)
                (divides.divides cts.zero n m)
                (auto:(cts.Term
                         cts.zero
                         (eq.eq cts.zero nat.nat O.O m)) =>
                 eq_coerc.eq_coerc
                   cts.zero
                   (divides.divides cts.zero n O.O)
                   (divides.divides cts.zero n m)
                   (divides_n_O.divides_n_O cts.zero n)
                   (rewrite_r.rewrite_r
                      (cts.succ cts.zero)
                      cts.zero
                      nat.nat
                      m
                      (__:(cts.Term cts.zero nat.nat) =>
                       eq.eq
                         (cts.succ cts.zero)
                         (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                         (divides.divides cts.zero n __)
                         (divides.divides cts.zero n m))
                      (refl.refl
                         (cts.succ cts.zero)
                         (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                         (divides.divides cts.zero n m))
                      O.O
                      auto))
                ndivnm)
             (le_O_n.le_O_n m))))
    _clearme.

