def lt_to_le : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (lt.lt x x0)
             (x1 => le.le x x0))))
  :=
  x:(cts.Term cts.zero nat.nat) =>
  y:(cts.Term cts.zero nat.nat) =>
  auto:(cts.Term cts.zero (lt.lt x y)) =>
  le_plus_b.le_plus_b
    (S.S O.O)
    x
    y
    (eq_coerc.eq_coerc
       cts.zero
       (le.le (S.S x) y)
       (le.le (plus.plus x (S.S O.O)) y)
       auto
       (rewrite_r.rewrite_r
          (cts.succ cts.zero)
          cts.zero
          nat.nat
          (plus.plus x (S.S O.O))
          (__:(cts.Term cts.zero nat.nat) =>
           eq.eq
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (le.le __ y)
             (le.le (plus.plus x (S.S O.O)) y))
          (refl.refl
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (le.le (plus.plus x (S.S O.O)) y))
          (S.S x)
          (rewrite_r.rewrite_r
             cts.zero
             cts.zero
             nat.nat
             (plus.plus x O.O)
             (__:(cts.Term cts.zero nat.nat) =>
              eq.eq cts.zero nat.nat (S.S __) (plus.plus x (S.S O.O)))
             (plus_n_Sm.plus_n_Sm x O.O)
             x
             (plus_n_O.plus_n_O x)))).

