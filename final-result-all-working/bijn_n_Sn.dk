def bijn_n_Sn :  (l?0 : cts.Sort) ->
  cts.Term
    l?0
    (cts.prod
       cts.zero
       l?0
       l?0
       cts.I
       (cts.prod cts.zero cts.zero cts.zero cts.I nat.nat (x => nat.nat))
       (x =>
        cts.prod
          cts.zero
          l?0
          l?0
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             l?0
             cts.zero
             l?0
             cts.I
             (bijn.bijn l?0 x x0)
             (x1 =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (eq.eq cts.zero nat.nat (x (S.S x0)) (S.S x0))
                (x2 => bijn.bijn cts.zero x (S.S x0))))))
  := l?0 =>
  f:(cts.Term
       cts.zero
       (cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x => nat.nat))) =>
  n:(cts.Term cts.zero nat.nat) =>
  bijf:(cts.Term l?0 (bijn.bijn l?0 f n)) =>
  fS:(cts.Term cts.zero (eq.eq cts.zero nat.nat (f (S.S n)) (S.S n))) =>
  i:(cts.Term cts.zero nat.nat) =>
  lein:(cts.Term cts.zero (le.le i (S.S n))) =>
  match_Or_prop.match_Or_prop
    (lt.lt i (S.S n))
    (eq.eq cts.zero nat.nat i (S.S n))
    (ex.ex
       cts.zero
       cts.zero
       cts.zero
       nat.nat
       (p:(cts.Term cts.zero nat.nat) =>
        And.And (le.le p (S.S n)) (eq.eq cts.zero nat.nat (f p) i)))
    (Hi:(cts.Term cts.zero (lt.lt i (S.S n))) =>
     match_ex_prop.match_ex_prop
       cts.zero
       cts.zero
       cts.zero
       l?0
       nat.nat
       (p:(cts.Term cts.zero nat.nat) =>
        And.And (le.le p n) (eq.eq cts.zero nat.nat (f p) i))
       (ex.ex
          cts.zero
          cts.zero
          cts.zero
          nat.nat
          (p:(cts.Term cts.zero nat.nat) =>
           And.And (le.le p (S.S n)) (eq.eq cts.zero nat.nat (f p) i)))
       (a:(cts.Term cts.zero nat.nat) =>
        _clearme:(cts.Term
                    cts.zero
                    (And.And (le.le a n) (eq.eq cts.zero nat.nat (f a) i))) =>
        match_And_prop.match_And_prop
          (le.le a n)
          (eq.eq cts.zero nat.nat (f a) i)
          (ex.ex
             cts.zero
             cts.zero
             cts.zero
             nat.nat
             (p:(cts.Term cts.zero nat.nat) =>
              And.And (le.le p (S.S n)) (eq.eq cts.zero nat.nat (f p) i)))
          (lean:(cts.Term cts.zero (le.le a n)) =>
           fa:(cts.Term cts.zero (eq.eq cts.zero nat.nat (f a) i)) =>
           ex_intro.ex_intro
             cts.zero
             cts.zero
             cts.zero
             nat.nat
             (x:(cts.Term cts.zero nat.nat) =>
              And.And (le.le x (S.S n)) (eq.eq cts.zero nat.nat (f x) i))
             a
             (conj.conj
                (le.le a (S.S n))
                (eq.eq cts.zero nat.nat (f a) i)
                (le_S.le_S a n lean)
                (rewrite_r.rewrite_r
                   cts.zero
                   cts.zero
                   nat.nat
                   i
                   (__:(cts.Term cts.zero nat.nat) =>
                    eq.eq cts.zero nat.nat __ i)
                   (refl.refl cts.zero nat.nat i)
                   (f a)
                   fa)))
          _clearme)
       (bijf i (le_S_S_to_le.le_S_S_to_le i n Hi)))
    (Hi:(cts.Term cts.zero (eq.eq cts.zero nat.nat i (S.S n))) =>
     ex_intro.ex_intro
       cts.zero
       cts.zero
       cts.zero
       nat.nat
       (x:(cts.Term cts.zero nat.nat) =>
        And.And (le.le x (S.S n)) (eq.eq cts.zero nat.nat (f x) i))
       i
       (conj.conj
          (le.le i (S.S n))
          (eq.eq cts.zero nat.nat (f i) i)
          (eq_coerc.eq_coerc
             cts.zero
             (le.le i i)
             (le.le i (S.S n))
             (le_n.le_n i)
             (rewrite_l.rewrite_l
                (cts.succ cts.zero)
                cts.zero
                nat.nat
                i
                (__:(cts.Term cts.zero nat.nat) =>
                 eq.eq
                   (cts.succ cts.zero)
                   (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                   (le.le i i)
                   (le.le i __))
                (refl.refl
                   (cts.succ cts.zero)
                   (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                   (le.le i i))
                (S.S n)
                Hi))
          (rewrite_r.rewrite_r
             cts.zero
             cts.zero
             nat.nat
             i
             (__:(cts.Term cts.zero nat.nat) => eq.eq cts.zero nat.nat __ i)
             (refl.refl cts.zero nat.nat i)
             (f i)
             (rewrite_r.rewrite_r
                cts.zero
                cts.zero
                nat.nat
                (S.S n)
                (__:(cts.Term cts.zero nat.nat) =>
                 eq.eq cts.zero nat.nat (f i) __)
                (rewrite_r.rewrite_r
                   cts.zero
                   cts.zero
                   nat.nat
                   (S.S n)
                   (__:(cts.Term cts.zero nat.nat) =>
                    eq.eq cts.zero nat.nat (f __) (S.S n))
                   fS
                   i
                   Hi)
                i
                Hi))))
    (le_to_or_lt_eq.le_to_or_lt_eq i (S.S n) lein).

