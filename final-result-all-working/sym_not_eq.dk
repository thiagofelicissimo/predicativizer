def sym_not_eq : 
  cts.Term
    (cts.succ cts.zero)
    (cts.prod
       (cts.succ cts.zero)
       cts.zero
       (cts.succ cts.zero)
       cts.I
       (cts.univ cts.zero (cts.succ cts.zero) cts.I)
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          x
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             x
             (x1 =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (Not.Not (eq.eq cts.zero x x0 x1))
                (x2 => Not.Not (eq.eq cts.zero x x1 x0))))))
  :=
  A:(cts.Term (cts.succ cts.zero) (cts.univ cts.zero (cts.succ cts.zero) cts.I)) =>
  x:(cts.Term cts.zero A) =>
  y:(cts.Term cts.zero A) =>
  auto:(cts.Term cts.zero (Not.Not (eq.eq cts.zero A x y))) =>
  nmk.nmk
    (eq.eq cts.zero A y x)
    (auto':(cts.Term cts.zero (eq.eq cts.zero A y x)) =>
     absurd.absurd
       (eq.eq cts.zero A x y)
       (rewrite_r.rewrite_r
          cts.zero
          cts.zero
          A
          x
          (__:(cts.Term cts.zero A) => eq.eq cts.zero A x __)
          (refl.refl cts.zero A x)
          y
          auto')
       auto).

