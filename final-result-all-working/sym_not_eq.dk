def sym_not_eq :  (l?2 : cts.Sort) ->
  cts.Term
    (cts.succ l?2)
    (cts.prod
       (cts.succ l?2)
       l?2
       (cts.succ l?2)
       cts.I
       (cts.univ l?2 (cts.succ l?2) cts.I)
       (x =>
        cts.prod
          l?2
          l?2
          l?2
          cts.I
          x
          (x0 =>
           cts.prod
             l?2
             l?2
             l?2
             cts.I
             x
             (x1 =>
              cts.prod
                l?2
                l?2
                l?2
                cts.I
                (Not.Not l?2 (eq.eq l?2 x x0 x1))
                (x2 => Not.Not l?2 (eq.eq l?2 x x1 x0))))))
  := l?2 =>
  A:(cts.Term (cts.succ l?2) (cts.univ l?2 (cts.succ l?2) cts.I)) =>
  x:(cts.Term l?2 A) =>
  y:(cts.Term l?2 A) =>
  auto:(cts.Term
          l?2
          (Not.Not l?2 (eq.eq l?2 A x y))) =>
  nmk.nmk
    cts.zero
    l?2
    (eq.eq l?2 A y x)
    (auto':(cts.Term l?2 (eq.eq l?2 A y x)) =>
     absurd.absurd
       l?2
       cts.zero
       (eq.eq l?2 A x y)
       (rewrite_r.rewrite_r
          l?2
          l?2
          A
          x
          (__:(cts.Term l?2 A) => eq.eq l?2 A x __)
          (refl.refl l?2 A x)
          y
          auto')
       auto).

