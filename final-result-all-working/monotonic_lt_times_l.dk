def monotonic_lt_times_l : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          (lt.lt O.O x)
          (x0 =>
           monotonic.monotonic
             cts.zero
             cts.zero
             nat.nat
             lt.lt
             (t:(cts.Term cts.zero nat.nat) => times.times t x))))
  :=
  c:(cts.Term cts.zero nat.nat) =>
  auto:(cts.Term cts.zero (lt.lt O.O c)) =>
  x:(cts.Term cts.zero nat.nat) =>
  y:(cts.Term cts.zero nat.nat) =>
  auto':(cts.Term cts.zero (lt.lt x y)) =>
  eq_coerc.eq_coerc
    cts.zero
    (le.le (S.S (times.times c x)) (times.times c y))
    (le.le (S.S (times.times x c)) (times.times y c))
    (monotonic_lt_times_r.monotonic_lt_times_r c auto x y auto')
    (rewrite_r.rewrite_r
       (cts.succ cts.zero)
       cts.zero
       nat.nat
       (times.times c x)
       (__:(cts.Term cts.zero nat.nat) =>
        eq.eq
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (le.le (S.S (times.times c x)) (times.times c y))
          (le.le (S.S __) (times.times y c)))
       (rewrite_r.rewrite_r
          (cts.succ cts.zero)
          cts.zero
          nat.nat
          (times.times c y)
          (__:(cts.Term cts.zero nat.nat) =>
           eq.eq
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (le.le (S.S (times.times c x)) (times.times c y))
             (le.le (S.S (times.times c x)) __))
          (refl.refl
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (le.le (S.S (times.times c x)) (times.times c y)))
          (times.times y c)
          (commutative_times.commutative_times y c))
       (times.times x c)
       (commutative_times.commutative_times x c)).

