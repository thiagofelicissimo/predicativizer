def eq_match_nat_type_S :  (l?19 : cts.Sort) -> (l?9 : cts.Sort) ->
  cts.Term
    (cts.max (cts.succ l?9) (cts.max l?9 (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?19)) l?19))))
    (cts.prod
       (cts.succ l?9)
       (cts.max l?9 (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?19)) l?19)))
       (cts.max (cts.succ l?9) (cts.max l?9 (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?19)) l?19))))
       cts.I
       (cts.univ l?9 (cts.succ l?9) cts.I)
       (x =>
        cts.prod
          l?9
          (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?19)) l?19))
          (cts.max l?9 (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?19)) l?19)))
          cts.I
          x
          (x0 =>
           cts.prod
             l?9
             (cts.max (cts.max l?9 (cts.succ l?19)) l?19)
             (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?19)) l?19))
             cts.I
             (cts.prod
                cts.zero
                l?9
                l?9
                cts.I
                nat.nat
                (x1 => x))
             (x1 =>
              cts.prod
                cts.zero
                (cts.max (cts.max l?9 (cts.succ l?19)) l?19)
                (cts.max (cts.max l?9 (cts.succ l?19)) l?19)
                cts.I
                nat.nat
                (x2 =>
                 leibniz.leibniz
                   l?9
                   l?19
                   x
                   (match_nat_type.match_nat_type l?9 x x0 x1 (S.S x2))
                   (x1 x2))))))
  := l?19 => l?9 =>
  return_type:(cts.Term
                 (cts.succ l?9)
                 (cts.univ l?9 (cts.succ l?9) cts.I)) =>
  case_O:(cts.Term l?9 return_type) =>
  case_S:(cts.Term
            l?9
            (cts.prod
               cts.zero
               l?9
               l?9
               cts.I
               nat.nat
               (x => return_type))) =>
  n:(cts.Term cts.zero nat.nat) =>
  equal_leibniz.equal_leibniz
    l?9
    l?19
    return_type
    (match_nat_type.match_nat_type l?9 return_type case_O case_S (S.S n))
    (case_S n)
    (axiom_match_nat_type_S.axiom_match_nat_type_S
       l?9
       return_type
       case_O
       case_S
       n).

