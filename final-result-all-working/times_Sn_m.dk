def times_Sn_m : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           eq.eq
             cts.zero
             nat.nat
             (plus.plus x0 (times.times x x0))
             (times.times (S.S x) x0))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  sym_eq_times.sym_eq_times
    cts.zero
    (S.S n)
    (y:(cts.Term
          cts.zero
          (cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             nat.nat
             (x => nat.nat))) =>
     eq.eq cts.zero nat.nat (plus.plus m (times.times n m)) (y m))
    (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S
       cts.zero
       cts.zero
       (cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x => nat.nat))
       times_body.times_body
       n
       (y:(cts.Term
             cts.zero
             (cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                nat.nat
                (x => nat.nat))) =>
        eq.eq cts.zero nat.nat (plus.plus m (times.times n m)) (y m))
       (sym_eq_times_body_S.sym_eq_times_body_S
          cts.zero
          n
          (y:(cts.Term
                cts.zero
                (cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   nat.nat
                   (x => nat.nat))) =>
           eq.eq cts.zero nat.nat (plus.plus m (times.times n m)) (y m))
          (refl.refl cts.zero nat.nat (plus.plus m (times.times n m))))).

