def divides_gcd_nm : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           And.And
             (divides.divides cts.zero (gcd.gcd x x0) x0)
             (divides.divides cts.zero (gcd.gcd x x0) x))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  match_Or_prop.match_Or_prop
    (lt.lt O.O n)
    (eq.eq cts.zero nat.nat O.O n)
    (And.And
       (divides.divides cts.zero (gcd.gcd n m) m)
       (divides.divides cts.zero (gcd.gcd n m) n))
    (posn:(cts.Term cts.zero (lt.lt O.O n)) =>
     match_Or_prop.match_Or_prop
       (lt.lt O.O m)
       (eq.eq cts.zero nat.nat O.O m)
       (And.And
          (divides.divides cts.zero (gcd.gcd n m) m)
          (divides.divides cts.zero (gcd.gcd n m) n))
       (posm:(cts.Term cts.zero (lt.lt O.O m)) =>
        leb_elim.leb_elim
          cts.zero
          n
          m
          (__:(cts.Term cts.zero bool.bool) =>
           And.And
             (divides.divides
                cts.zero
                (match_bool_type.match_bool_type
                   cts.zero
                   nat.nat
                   (gcd_aux.gcd_aux n m n)
                   (gcd_aux.gcd_aux m n m)
                   __)
                m)
             (divides.divides
                cts.zero
                (match_bool_type.match_bool_type
                   cts.zero
                   nat.nat
                   (gcd_aux.gcd_aux n m n)
                   (gcd_aux.gcd_aux m n m)
                   __)
                n))
          (sym_eq_match_bool_type_true.sym_eq_match_bool_type_true
             cts.zero
             cts.zero
             nat.nat
             (gcd_aux.gcd_aux n m n)
             (gcd_aux.gcd_aux m n m)
             (y:(cts.Term cts.zero nat.nat) =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (le.le n m)
                (x =>
                 And.And
                   (divides.divides
                      cts.zero
                      (match_bool_type.match_bool_type
                         cts.zero
                         nat.nat
                         (gcd_aux.gcd_aux n m n)
                         (gcd_aux.gcd_aux m n m)
                         true.true)
                      m)
                   (divides.divides cts.zero y n)))
             (sym_eq_match_bool_type_true.sym_eq_match_bool_type_true
                cts.zero
                cts.zero
                nat.nat
                (gcd_aux.gcd_aux n m n)
                (gcd_aux.gcd_aux m n m)
                (y:(cts.Term cts.zero nat.nat) =>
                 cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   (le.le n m)
                   (x =>
                    And.And
                      (divides.divides cts.zero y m)
                      (divides.divides cts.zero (gcd_aux.gcd_aux n m n) n)))
                (lenm:(cts.Term cts.zero (le.le n m)) =>
                 divides_gcd_aux_mn.divides_gcd_aux_mn n m n posn lenm (le_n.le_n n))))
          (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false
             cts.zero
             cts.zero
             nat.nat
             (gcd_aux.gcd_aux n m n)
             (gcd_aux.gcd_aux m n m)
             (y:(cts.Term cts.zero nat.nat) =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (Not.Not (le.le n m))
                (x =>
                 And.And
                   (divides.divides
                      cts.zero
                      (match_bool_type.match_bool_type
                         cts.zero
                         nat.nat
                         (gcd_aux.gcd_aux n m n)
                         (gcd_aux.gcd_aux m n m)
                         false.false)
                      m)
                   (divides.divides cts.zero y n)))
             (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false
                cts.zero
                cts.zero
                nat.nat
                (gcd_aux.gcd_aux n m n)
                (gcd_aux.gcd_aux m n m)
                (y:(cts.Term cts.zero nat.nat) =>
                 cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   (Not.Not (le.le n m))
                   (x =>
                    And.And
                      (divides.divides cts.zero y m)
                      (divides.divides cts.zero (gcd_aux.gcd_aux m n m) n)))
                (notlt:(cts.Term cts.zero (Not.Not (le.le n m))) =>
                 match_And_prop.match_And_prop
                   (divides.divides cts.zero (gcd_aux.gcd_aux m n m) n)
                   (divides.divides cts.zero (gcd_aux.gcd_aux m n m) m)
                   (And.And
                      (divides.divides cts.zero (gcd_aux.gcd_aux m n m) m)
                      (divides.divides cts.zero (gcd_aux.gcd_aux m n m) n))
                   (auto:(cts.Term
                            cts.zero
                            (divides.divides
                               cts.zero
                               (gcd_aux.gcd_aux m n m)
                               n)) =>
                    auto':(cts.Term
                             cts.zero
                             (divides.divides
                                cts.zero
                                (gcd_aux.gcd_aux m n m)
                                m)) =>
                    conj.conj
                      (divides.divides cts.zero (gcd_aux.gcd_aux m n m) m)
                      (divides.divides cts.zero (gcd_aux.gcd_aux m n m) n)
                      auto'
                      auto)
                   (divides_gcd_aux_mn.divides_gcd_aux_mn
                      m
                      n
                      m
                      posm
                      (transitive_le.transitive_le
                         m
                         (S.S m)
                         n
                         (le_n_Sn.le_n_Sn m)
                         (not_le_to_lt.not_le_to_lt n m notlt))
                      (le_n.le_n m))))))
       (eqmO:(cts.Term cts.zero (eq.eq cts.zero nat.nat O.O m)) =>
        eq_ind.eq_ind
          cts.zero
          cts.zero
          nat.nat
          O.O
          (x_1:(cts.Term cts.zero nat.nat) =>
           And.And
             (divides.divides cts.zero (gcd.gcd n x_1) x_1)
             (divides.divides cts.zero (gcd.gcd n x_1) n))
          (conj.conj
             (divides.divides cts.zero (gcd.gcd n O.O) O.O)
             (divides.divides cts.zero (gcd.gcd n O.O) n)
             (divides_n_O.divides_n_O cts.zero (gcd.gcd n O.O))
             (eq_coerc.eq_coerc
                cts.zero
                (divides.divides cts.zero (gcd.gcd n O.O) (gcd.gcd n O.O))
                (divides.divides cts.zero (gcd.gcd n O.O) n)
                (divides_n_n.divides_n_n cts.zero (gcd.gcd n O.O))
                (rewrite_r.rewrite_r
                   (cts.succ cts.zero)
                   cts.zero
                   nat.nat
                   n
                   (__:(cts.Term cts.zero nat.nat) =>
                    eq.eq
                      (cts.succ cts.zero)
                      (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                      (divides.divides cts.zero (gcd.gcd n O.O) __)
                      (divides.divides cts.zero (gcd.gcd n O.O) n))
                   (refl.refl
                      (cts.succ cts.zero)
                      (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                      (divides.divides cts.zero (gcd.gcd n O.O) n))
                   (gcd.gcd n O.O)
                   (rewrite_l.rewrite_l
                      cts.zero
                      cts.zero
                      nat.nat
                      (gcd.gcd O.O n)
                      (__:(cts.Term cts.zero nat.nat) =>
                       eq.eq cts.zero nat.nat (gcd.gcd n O.O) __)
                      (commutative_gcd.commutative_gcd n O.O)
                      n
                      (gcd_O_l.gcd_O_l n)))))
          m
          eqmO)
       (le_to_or_lt_eq.le_to_or_lt_eq O.O m (le_O_n.le_O_n m)))
    (eqnO:(cts.Term cts.zero (eq.eq cts.zero nat.nat O.O n)) =>
     eq_ind.eq_ind
       cts.zero
       cts.zero
       nat.nat
       O.O
       (x_1:(cts.Term cts.zero nat.nat) =>
        And.And
          (divides.divides cts.zero (gcd.gcd x_1 m) m)
          (divides.divides cts.zero (gcd.gcd x_1 m) x_1))
       (conj.conj
          (divides.divides cts.zero (gcd.gcd O.O m) m)
          (divides.divides cts.zero (gcd.gcd O.O m) O.O)
          (eq_match_bool_type_true.eq_match_bool_type_true
             cts.zero
             cts.zero
             nat.nat
             m
             (gcd_aux.gcd_aux m O.O m)
             (y:(cts.Term cts.zero nat.nat) =>
              divides.divides
                cts.zero
                (match_bool_type.match_bool_type
                   cts.zero
                   nat.nat
                   (gcd_aux.gcd_aux O.O m O.O)
                   (gcd_aux.gcd_aux m O.O m)
                   (leb.leb O.O m))
                y)
             (eq_leb_body_O.eq_leb_body_O
                cts.zero
                (y:(cts.Term
                      cts.zero
                      (cts.prod
                         cts.zero
                         cts.zero
                         cts.zero
                         cts.I
                         nat.nat
                         (x => bool.bool))) =>
                 divides.divides
                   cts.zero
                   (match_bool_type.match_bool_type
                      cts.zero
                      nat.nat
                      (gcd_aux.gcd_aux O.O m O.O)
                      (gcd_aux.gcd_aux m O.O m)
                      (leb.leb O.O m))
                   (match_bool_type.match_bool_type
                      cts.zero
                      nat.nat
                      m
                      (gcd_aux.gcd_aux m O.O m)
                      (y m)))
                (eq_filter_nat_type_O.eq_filter_nat_type_O
                   cts.zero
                   cts.zero
                   (cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      nat.nat
                      (x => bool.bool))
                   leb_body.leb_body
                   (y:(cts.Term
                         cts.zero
                         (cts.prod
                            cts.zero
                            cts.zero
                            cts.zero
                            cts.I
                            nat.nat
                            (x => bool.bool))) =>
                    divides.divides
                      cts.zero
                      (match_bool_type.match_bool_type
                         cts.zero
                         nat.nat
                         (gcd_aux.gcd_aux O.O m O.O)
                         (gcd_aux.gcd_aux m O.O m)
                         (leb.leb O.O m))
                      (match_bool_type.match_bool_type
                         cts.zero
                         nat.nat
                         m
                         (gcd_aux.gcd_aux m O.O m)
                         (y m)))
                   (eq_leb.eq_leb
                      cts.zero
                      O.O
                      (y:(cts.Term
                            cts.zero
                            (cts.prod
                               cts.zero
                               cts.zero
                               cts.zero
                               cts.I
                               nat.nat
                               (x => bool.bool))) =>
                       divides.divides
                         cts.zero
                         (match_bool_type.match_bool_type
                            cts.zero
                            nat.nat
                            (gcd_aux.gcd_aux O.O m O.O)
                            (gcd_aux.gcd_aux m O.O m)
                            (leb.leb O.O m))
                         (match_bool_type.match_bool_type
                            cts.zero
                            nat.nat
                            m
                            (gcd_aux.gcd_aux m O.O m)
                            (y m)))
                      (eq_gcd_aux_body_O.eq_gcd_aux_body_O
                         cts.zero
                         (y:(cts.Term
                               cts.zero
                               (cts.prod
                                  cts.zero
                                  cts.zero
                                  cts.zero
                                  cts.I
                                  nat.nat
                                  (x =>
                                   cts.prod
                                     cts.zero
                                     cts.zero
                                     cts.zero
                                     cts.I
                                     nat.nat
                                     (x0 => nat.nat)))) =>
                          divides.divides
                            cts.zero
                            (gcd.gcd O.O m)
                            (match_bool_type.match_bool_type
                               cts.zero
                               nat.nat
                               (y m O.O)
                               (gcd_aux.gcd_aux m O.O m)
                               (leb.leb O.O m)))
                         (eq_filter_nat_type_O.eq_filter_nat_type_O
                            cts.zero
                            cts.zero
                            (cts.prod
                               cts.zero
                               cts.zero
                               cts.zero
                               cts.I
                               nat.nat
                               (x =>
                                cts.prod
                                  cts.zero
                                  cts.zero
                                  cts.zero
                                  cts.I
                                  nat.nat
                                  (x0 => nat.nat)))
                            gcd_aux_body.gcd_aux_body
                            (y:(cts.Term
                                  cts.zero
                                  (cts.prod
                                     cts.zero
                                     cts.zero
                                     cts.zero
                                     cts.I
                                     nat.nat
                                     (x =>
                                      cts.prod
                                        cts.zero
                                        cts.zero
                                        cts.zero
                                        cts.I
                                        nat.nat
                                        (x0 => nat.nat)))) =>
                             divides.divides
                               cts.zero
                               (gcd.gcd O.O m)
                               (match_bool_type.match_bool_type
                                  cts.zero
                                  nat.nat
                                  (y m O.O)
                                  (gcd_aux.gcd_aux m O.O m)
                                  (leb.leb O.O m)))
                            (eq_gcd_aux.eq_gcd_aux
                               cts.zero
                               O.O
                               (y:(cts.Term
                                     cts.zero
                                     (cts.prod
                                        cts.zero
                                        cts.zero
                                        cts.zero
                                        cts.I
                                        nat.nat
                                        (x =>
                                         cts.prod
                                           cts.zero
                                           cts.zero
                                           cts.zero
                                           cts.I
                                           nat.nat
                                           (x0 => nat.nat)))) =>
                                divides.divides
                                  cts.zero
                                  (gcd.gcd O.O m)
                                  (match_bool_type.match_bool_type
                                     cts.zero
                                     nat.nat
                                     (y m O.O)
                                     (gcd_aux.gcd_aux m O.O m)
                                     (leb.leb O.O m)))
                               (divides_n_n.divides_n_n
                                  cts.zero
                                  (gcd.gcd O.O m)))))))))
          (divides_n_O.divides_n_O cts.zero (gcd.gcd O.O m)))
       n
       eqnO)
    (le_to_or_lt_eq.le_to_or_lt_eq O.O n (le_O_n.le_O_n n)).

