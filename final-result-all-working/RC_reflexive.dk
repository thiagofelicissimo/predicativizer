def RC_reflexive : 
  cts.Term
    (cts.succ cts.zero)
    (cts.prod
       (cts.succ cts.zero)
       (cts.succ cts.zero)
       (cts.succ cts.zero)
       cts.I
       (cts.univ cts.zero (cts.succ cts.zero) cts.I)
       (x =>
        cts.prod
          (cts.succ cts.zero)
          cts.zero
          (cts.succ cts.zero)
          cts.I
          (cts.prod
             cts.zero
             (cts.succ cts.zero)
             (cts.succ cts.zero)
             cts.I
             x
             (x0 =>
              cts.prod
                cts.zero
                (cts.succ cts.zero)
                (cts.succ cts.zero)
                cts.I
                x
                (x1 => cts.univ cts.zero (cts.succ cts.zero) cts.I)))
          (x0 => reflexive.reflexive cts.zero cts.zero x (RC.RC x x0))))
  :=
  A:(cts.Term (cts.succ cts.zero) (cts.univ cts.zero (cts.succ cts.zero) cts.I)) =>
  R:(cts.Term
       (cts.succ cts.zero)
       (cts.prod
          cts.zero
          (cts.succ cts.zero)
          (cts.succ cts.zero)
          cts.I
          A
          (x =>
           cts.prod
             cts.zero
             (cts.succ cts.zero)
             (cts.succ cts.zero)
             cts.I
             A
             (x0 => cts.univ cts.zero (cts.succ cts.zero) cts.I)))) =>
  x:(cts.Term cts.zero A) =>
  or_intror.or_intror
    (R x x)
    (eq.eq cts.zero A x x)
    (refl.refl cts.zero A x).

