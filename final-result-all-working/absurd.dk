def absurd : 
  cts.Term
    (cts.succ cts.zero)
    (cts.prod
       (cts.succ cts.zero)
       cts.zero
       (cts.succ cts.zero)
       cts.I
       (cts.univ cts.zero (cts.succ cts.zero) cts.I)
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          x
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (Not.Not x)
             (x1 => False.False))))
  :=
  A:(cts.Term (cts.succ cts.zero) (cts.univ cts.zero (cts.succ cts.zero) cts.I)) =>
  H:(cts.Term cts.zero A) =>
  Hn:(cts.Term cts.zero (Not.Not A)) =>
  Not_ind.Not_ind
    cts.zero
    A
    False.False
    (_x_80:(cts.Term
              cts.zero
              (cts.prod
                 cts.zero
                 cts.zero
                 cts.zero
                 cts.I
                 A
                 (x => False.False))) =>
     _x_80 H)
    Hn.

