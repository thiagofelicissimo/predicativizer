def not_le_to_not_le_S_S : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (Not.Not cts.zero (le.le x x0))
             (x1 => Not.Not cts.zero (le.le (S.S x) (S.S x0))))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  auto:(cts.Term cts.zero (Not.Not cts.zero (le.le n m))) =>
  not_to_not.not_to_not
    cts.zero
    cts.zero
    (le.le (S.S n) (S.S m))
    (le.le n m)
    (auto':(cts.Term cts.zero (le.le (S.S n) (S.S m))) =>
     eq_coerc.eq_coerc
       cts.zero
       (le.le (pred.pred (S.S n)) (pred.pred (S.S m)))
       (le.le n m)
       (monotonic_pred.monotonic_pred (S.S n) (S.S m) auto')
       (rewrite_l.rewrite_l
          (cts.succ cts.zero)
          cts.zero
          nat.nat
          n
          (__:(cts.Term cts.zero nat.nat) =>
           eq.eq
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (le.le __ (pred.pred (S.S m)))
             (le.le n m))
          (rewrite_l.rewrite_l
             (cts.succ cts.zero)
             cts.zero
             nat.nat
             m
             (__:(cts.Term cts.zero nat.nat) =>
              eq.eq
                (cts.succ cts.zero)
                (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                (le.le n __)
                (le.le n m))
             (refl.refl
                (cts.succ cts.zero)
                (cts.univ cts.zero (cts.succ cts.zero) cts.I)
                (le.le n m))
             (pred.pred (S.S m))
             (pred_Sn.pred_Sn m))
          (pred.pred (S.S n))
          (pred_Sn.pred_Sn n)))
    auto.

