def le_n_O_elim :  (l?8 : cts.Sort) ->
  cts.Term
    (cts.succ l?8)
    (cts.prod
       cts.zero
       (cts.succ l?8)
       (cts.succ l?8)
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          (cts.succ l?8)
          (cts.succ l?8)
          cts.I
          (le.le x O.O)
          (x0 =>
           cts.prod
             (cts.succ l?8)
             l?8
             (cts.succ l?8)
             cts.I
             (cts.prod
                cts.zero
                (cts.succ l?8)
                (cts.succ l?8)
                cts.I
                nat.nat
                (x1 => cts.univ l?8 (cts.succ l?8) cts.I))
             (x1 =>
              cts.prod
                l?8
                l?8
                l?8
                cts.I
                (x1 O.O)
                (x2 => x1 x)))))
  := l?8 =>
  n:(cts.Term cts.zero nat.nat) =>
  match_nat_prop.match_nat_prop
    (cts.succ l?8)
    (__:(cts.Term cts.zero nat.nat) =>
     cts.prod
       cts.zero
       (cts.succ l?8)
       (cts.succ l?8)
       cts.I
       (le.le __ O.O)
       (x =>
        cts.prod
          (cts.succ l?8)
          l?8
          (cts.succ l?8)
          cts.I
          (cts.prod
             cts.zero
             (cts.succ l?8)
             (cts.succ l?8)
             cts.I
             nat.nat
             (x0 => cts.univ l?8 (cts.succ l?8) cts.I))
          (x0 =>
           cts.prod
             l?8
             l?8
             l?8
             cts.I
             (x0 O.O)
             (x1 => x0 __))))
    (auto:(cts.Term cts.zero (le.le O.O O.O)) =>
     P:(cts.Term
          (cts.succ l?8)
          (cts.prod
             cts.zero
             (cts.succ l?8)
             (cts.succ l?8)
             cts.I
             nat.nat
             (x => cts.univ l?8 (cts.succ l?8) cts.I))) =>
     auto':(cts.Term l?8 (P O.O)) => auto')
    (a:(cts.Term cts.zero nat.nat) =>
     abs:(cts.Term cts.zero (le.le (S.S a) O.O)) =>
     falsity.falsity
       (cts.succ l?8)
       (cts.prod
          (cts.succ l?8)
          l?8
          (cts.succ l?8)
          cts.I
          (cts.prod
             cts.zero
             (cts.succ l?8)
             (cts.succ l?8)
             cts.I
             nat.nat
             (x => cts.univ l?8 (cts.succ l?8) cts.I))
          (x =>
           cts.prod
             l?8
             l?8
             l?8
             cts.I
             (x O.O)
             (x0 => x (S.S a))))
       (absurd.absurd (le.le (S.S a) O.O) abs (not_le_Sn_O.not_le_Sn_O a)))
    n.

