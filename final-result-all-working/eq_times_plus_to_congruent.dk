def eq_times_plus_to_congruent : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                nat.nat
                (x2 =>
                 cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   (lt.lt O.O x1)
                   (x3 =>
                    cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      (eq.eq
                         cts.zero
                         nat.nat
                         x
                         (plus.plus (times.times x2 x1) x0))
                      (x4 => congruent.congruent x x0 x1)))))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  p:(cts.Term cts.zero nat.nat) =>
  r:(cts.Term cts.zero nat.nat) =>
  posp:(cts.Term cts.zero (lt.lt O.O p)) =>
  Hn:(cts.Term
        cts.zero
        (eq.eq cts.zero nat.nat n (plus.plus (times.times r p) m))) =>
  div_mod_spec_to_eq2.div_mod_spec_to_eq2
    cts.zero
    cts.zero
    n
    p
    (div.div n p)
    (mod.mod n p)
    (plus.plus r (div.div m p))
    (mod.mod m p)
    (div_mod_spec_div_mod.div_mod_spec_div_mod cts.zero n p posp)
    (div_mod_spec_intro.div_mod_spec_intro
       cts.zero
       n
       p
       (plus.plus r (div.div m p))
       (mod.mod m p)
       (lt_mod_m_m.lt_mod_m_m m p posp)
       (eq_ind_r.eq_ind_r
          cts.zero
          cts.zero
          nat.nat
          (times.times p (plus.plus r (div.div m p)))
          (x:(cts.Term cts.zero nat.nat) =>
           eq.eq cts.zero nat.nat n (plus.plus x (mod.mod m p)))
          (eq_ind_r.eq_ind_r
             cts.zero
             cts.zero
             nat.nat
             (plus.plus (times.times p r) (times.times p (div.div m p)))
             (x:(cts.Term cts.zero nat.nat) =>
              eq.eq cts.zero nat.nat n (plus.plus x (mod.mod m p)))
             (eq_ind_r.eq_ind_r
                cts.zero
                cts.zero
                nat.nat
                (times.times r p)
                (x:(cts.Term cts.zero nat.nat) =>
                 eq.eq
                   cts.zero
                   nat.nat
                   n
                   (plus.plus (plus.plus x (times.times p (div.div m p))) (mod.mod m p)))
                (eq_ind_r.eq_ind_r
                   cts.zero
                   cts.zero
                   nat.nat
                   (times.times (div.div m p) p)
                   (x:(cts.Term cts.zero nat.nat) =>
                    eq.eq
                      cts.zero
                      nat.nat
                      n
                      (plus.plus (plus.plus (times.times r p) x) (mod.mod m p)))
                   (eq_ind_r.eq_ind_r
                      cts.zero
                      cts.zero
                      nat.nat
                      (plus.plus
                         (times.times r p)
                         (plus.plus (times.times (div.div m p) p) (mod.mod m p)))
                      (x:(cts.Term cts.zero nat.nat) =>
                       eq.eq cts.zero nat.nat n x)
                      (rewrite_r.rewrite_r
                         cts.zero
                         cts.zero
                         nat.nat
                         (times.times p r)
                         (__:(cts.Term cts.zero nat.nat) =>
                          eq.eq
                            cts.zero
                            nat.nat
                            n
                            (plus.plus
                               __
                               (plus.plus (times.times (div.div m p) p) (mod.mod m p))))
                         (rewrite_r.rewrite_r
                            cts.zero
                            cts.zero
                            nat.nat
                            (times.times p (div.div m p))
                            (__:(cts.Term cts.zero nat.nat) =>
                             eq.eq
                               cts.zero
                               nat.nat
                               n
                               (plus.plus (times.times p r) (plus.plus __ (mod.mod m p))))
                            (rewrite_r.rewrite_r
                               cts.zero
                               cts.zero
                               nat.nat
                               (plus.plus (mod.mod m p) (times.times p (div.div m p)))
                               (__:(cts.Term cts.zero nat.nat) =>
                                eq.eq
                                  cts.zero
                                  nat.nat
                                  n
                                  (plus.plus (times.times p r) __))
                               (rewrite_l.rewrite_l
                                  cts.zero
                                  cts.zero
                                  nat.nat
                                  m
                                  (__:(cts.Term
                                         cts.zero
                                         nat.nat) =>
                                   eq.eq
                                     cts.zero
                                     nat.nat
                                     n
                                     (plus.plus (times.times p r) __))
                                  (rewrite_r.rewrite_r
                                     cts.zero
                                     cts.zero
                                     nat.nat
                                     (plus.plus m (times.times p r))
                                     (__:(cts.Term
                                            cts.zero
                                            nat.nat) =>
                                      eq.eq
                                        cts.zero
                                        nat.nat
                                        n
                                        __)
                                     (rewrite_l.rewrite_l
                                        cts.zero
                                        cts.zero
                                        nat.nat
                                        n
                                        (__:(cts.Term
                                               cts.zero
                                               nat.nat) =>
                                         eq.eq
                                           cts.zero
                                           nat.nat
                                           n
                                           __)
                                        (refl.refl
                                           cts.zero
                                           nat.nat
                                           n)
                                        (plus.plus m (times.times p r))
                                        (rewrite_l.rewrite_l
                                           cts.zero
                                           cts.zero
                                           nat.nat
                                           (plus.plus (times.times p r) m)
                                           (__:(cts.Term
                                                  cts.zero
                                                  nat.nat) =>
                                            eq.eq
                                              cts.zero
                                              nat.nat
                                              n
                                              __)
                                           (rewrite_l.rewrite_l
                                              cts.zero
                                              cts.zero
                                              nat.nat
                                              (times.times r p)
                                              (__:(cts.Term
                                                     cts.zero
                                                     nat.nat) =>
                                               eq.eq
                                                 cts.zero
                                                 nat.nat
                                                 n
                                                 (plus.plus __ m))
                                              Hn
                                              (times.times p r)
                                              (commutative_times.commutative_times r p))
                                           (plus.plus m (times.times p r))
                                           (commutative_plus.commutative_plus
                                              (times.times p r)
                                              m)))
                                     (plus.plus (times.times p r) m)
                                     (commutative_plus.commutative_plus
                                        (times.times p r)
                                        m))
                                  (plus.plus (mod.mod m p) (times.times p (div.div m p)))
                                  (rewrite_l.rewrite_l
                                     cts.zero
                                     cts.zero
                                     nat.nat
                                     (plus.plus
                                        (times.times p (div.div m p))
                                        (mod.mod m p))
                                     (__:(cts.Term
                                            cts.zero
                                            nat.nat) =>
                                      eq.eq
                                        cts.zero
                                        nat.nat
                                        m
                                        __)
                                     (rewrite_l.rewrite_l
                                        cts.zero
                                        cts.zero
                                        nat.nat
                                        (times.times (div.div m p) p)
                                        (__:(cts.Term
                                               cts.zero
                                               nat.nat) =>
                                         eq.eq
                                           cts.zero
                                           nat.nat
                                           m
                                           (plus.plus __ (mod.mod m p)))
                                        (div_mod.div_mod m p)
                                        (times.times p (div.div m p))
                                        (commutative_times.commutative_times
                                           (div.div m p)
                                           p))
                                     (plus.plus
                                        (mod.mod m p)
                                        (times.times p (div.div m p)))
                                     (commutative_plus.commutative_plus
                                        (times.times p (div.div m p))
                                        (mod.mod m p))))
                               (plus.plus (times.times p (div.div m p)) (mod.mod m p))
                               (commutative_plus.commutative_plus
                                  (times.times p (div.div m p))
                                  (mod.mod m p)))
                            (times.times (div.div m p) p)
                            (commutative_times.commutative_times (div.div m p) p))
                         (times.times r p)
                         (commutative_times.commutative_times r p))
                      (plus.plus
                         (plus.plus (times.times r p) (times.times (div.div m p) p))
                         (mod.mod m p))
                      (associative_plus.associative_plus
                         (times.times r p)
                         (times.times (div.div m p) p)
                         (mod.mod m p)))
                   (times.times p (div.div m p))
                   (commutative_times.commutative_times p (div.div m p)))
                (times.times p r)
                (commutative_times.commutative_times p r))
             (times.times p (plus.plus r (div.div m p)))
             (distributive_times_plus.distributive_times_plus p r (div.div m p)))
          (times.times (plus.plus r (div.div m p)) p)
          (commutative_times.commutative_times (plus.plus r (div.div m p)) p))).

