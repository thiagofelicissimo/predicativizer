def le_plus_n_r : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 => le.le x0 (plus.plus x0 x))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  eq_coerc.eq_coerc
    cts.zero
    (le.le m (plus.plus n m))
    (le.le m (plus.plus m n))
    (le_plus_n.le_plus_n n m)
    (rewrite_r.rewrite_r
       (cts.succ cts.zero)
       cts.zero
       nat.nat
       (plus.plus n m)
       (__:(cts.Term cts.zero nat.nat) =>
        eq.eq
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (le.le m (plus.plus n m))
          (le.le m __))
       (refl.refl
          (cts.succ cts.zero)
          (cts.univ cts.zero (cts.succ cts.zero) cts.I)
          (le.le m (plus.plus n m)))
       (plus.plus m n)
       (commutative_plus.commutative_plus m n)).

