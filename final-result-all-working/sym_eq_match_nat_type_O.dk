def sym_eq_match_nat_type_O :  (l?16 : cts.Sort) -> (l?9 : cts.Sort) ->
  cts.Term
    (cts.max (cts.succ l?9) (cts.max l?9 (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?16)) l?16))))
    (cts.prod
       (cts.succ l?9)
       (cts.max l?9 (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?16)) l?16)))
       (cts.max (cts.succ l?9) (cts.max l?9 (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?16)) l?16))))
       cts.I
       (cts.univ l?9 (cts.succ l?9) cts.I)
       (x =>
        cts.prod
          l?9
          (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?16)) l?16))
          (cts.max l?9 (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?16)) l?16)))
          cts.I
          x
          (x0 =>
           cts.prod
             l?9
             (cts.max (cts.max l?9 (cts.succ l?16)) l?16)
             (cts.max l?9 (cts.max (cts.max l?9 (cts.succ l?16)) l?16))
             cts.I
             (cts.prod
                cts.zero
                l?9
                l?9
                cts.I
                nat.nat
                (x1 => x))
             (x1 =>
              leibniz.leibniz
                l?9
                l?16
                x
                x0
                (match_nat_type.match_nat_type l?9 x x0 x1 O.O)))))
  := l?16 => l?9 =>
  return_type:(cts.Term
                 (cts.succ l?9)
                 (cts.univ l?9 (cts.succ l?9) cts.I)) =>
  case_O:(cts.Term l?9 return_type) =>
  case_S:(cts.Term
            l?9
            (cts.prod
               cts.zero
               l?9
               l?9
               cts.I
               nat.nat
               (x => return_type))) =>
  sym_leibniz.sym_leibniz
    cts.zero
    l?9
    l?16
    return_type
    (match_nat_type.match_nat_type l?9 return_type case_O case_S O.O)
    case_O
    (eq_match_nat_type_O.eq_match_nat_type_O
       cts.zero
       l?9
       return_type
       case_O
       case_S).

