def lt_S_to_lt : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             (lt.lt (S.S x) x0)
             (x1 => lt.lt x x0))))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  m:(cts.Term cts.zero nat.nat) =>
  auto:(cts.Term cts.zero (lt.lt (S.S n) m)) =>
  transitive_lt.transitive_lt
    n
    (S.S n)
    m
    (eq_coerc.eq_coerc
       cts.zero
       (le.le (S.S n) (plus.plus O.O (S.S n)))
       (le.le (S.S n) (S.S n))
       (le_plus_n.le_plus_n O.O (S.S n))
       (rewrite_l.rewrite_l
          (cts.succ cts.zero)
          cts.zero
          nat.nat
          (S.S n)
          (__:(cts.Term cts.zero nat.nat) =>
           eq.eq
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (le.le (S.S n) __)
             (le.le (S.S n) (S.S n)))
          (refl.refl
             (cts.succ cts.zero)
             (cts.univ cts.zero (cts.succ cts.zero) cts.I)
             (le.le (S.S n) (S.S n)))
          (plus.plus O.O (S.S n))
          (plus_O_n.plus_O_n (S.S n))))
    auto.

