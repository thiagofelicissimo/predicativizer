def lt_plus_to_minus_r : 
  cts.Term
    cts.zero
    (cts.prod
       cts.zero
       cts.zero
       cts.zero
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.zero
          cts.zero
          cts.zero
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                (lt.lt (plus.plus x x0) x1)
                (x2 => lt.lt x (minus.minus x1 x0))))))
  :=
  a:(cts.Term cts.zero nat.nat) =>
  b:(cts.Term cts.zero nat.nat) =>
  c:(cts.Term cts.zero nat.nat) =>
  H:(cts.Term cts.zero (lt.lt (plus.plus a b) c)) =>
  le_plus_to_minus_r.le_plus_to_minus_r
    (S.S a)
    b
    c
    (sym_eq_plus.sym_eq_plus
       cts.zero
       (S.S a)
       (y:(cts.Term
             cts.zero
             (cts.prod
                cts.zero
                cts.zero
                cts.zero
                cts.I
                nat.nat
                (x => nat.nat))) =>
        le.le (y b) c)
       (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S
          cts.zero
          cts.zero
          (cts.prod
             cts.zero
             cts.zero
             cts.zero
             cts.I
             nat.nat
             (x => nat.nat))
          plus_body.plus_body
          a
          (y:(cts.Term
                cts.zero
                (cts.prod
                   cts.zero
                   cts.zero
                   cts.zero
                   cts.I
                   nat.nat
                   (x => nat.nat))) =>
           le.le (y b) c)
          (sym_eq_plus_body_S.sym_eq_plus_body_S
             cts.zero
             a
             (y:(cts.Term
                   cts.zero
                   (cts.prod
                      cts.zero
                      cts.zero
                      cts.zero
                      cts.I
                      nat.nat
                      (x => nat.nat))) =>
              le.le (y b) c)
             H))).

