def not_zero : 
  cts.Term
    (cts.succ cts.zero)
    (cts.prod
       cts.zero
       (cts.succ cts.zero)
       (cts.succ cts.zero)
       cts.I
       nat.nat
       (x => cts.univ cts.zero (cts.succ cts.zero) cts.I))
  :=
  n:(cts.Term cts.zero nat.nat) =>
  match_nat_type.match_nat_type
    (cts.succ cts.zero)
    (cts.univ cts.zero (cts.succ cts.zero) cts.I)
    False.False
    (p:(cts.Term cts.zero nat.nat) => True.True)
    n.

