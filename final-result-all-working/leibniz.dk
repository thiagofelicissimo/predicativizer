def leibniz :  (l?28 : cts.Sort) -> (l?15 : cts.Sort) ->
  cts.Term
    (cts.max (cts.succ l?28) (cts.max l?28 (cts.max l?28 (cts.succ (cts.max (cts.max l?28 (cts.succ l?15)) l?15)))))
    (cts.prod
       (cts.succ l?28)
       (cts.max l?28 (cts.max l?28 (cts.succ (cts.max (cts.max l?28 (cts.succ l?15)) l?15))))
       (cts.max (cts.succ l?28) (cts.max l?28 (cts.max l?28 (cts.succ (cts.max (cts.max l?28 (cts.succ l?15)) l?15)))))
       cts.I
       (cts.univ l?28 (cts.succ l?28) cts.I)
       (x =>
        cts.prod
          l?28
          (cts.max l?28 (cts.succ (cts.max (cts.max l?28 (cts.succ l?15)) l?15)))
          (cts.max l?28 (cts.max l?28 (cts.succ (cts.max (cts.max l?28 (cts.succ l?15)) l?15))))
          cts.I
          x
          (x0 =>
           cts.prod
             l?28
             (cts.succ (cts.max (cts.max l?28 (cts.succ l?15)) l?15))
             (cts.max l?28 (cts.succ (cts.max (cts.max l?28 (cts.succ l?15)) l?15)))
             cts.I
             x
             (x1 => cts.univ (cts.max (cts.max l?28 (cts.succ l?15)) l?15) (cts.succ (cts.max (cts.max l?28 (cts.succ l?15)) l?15)) cts.I))))
  := l?28 => l?15 =>
  A:(cts.Term (cts.succ l?28) (cts.univ l?28 (cts.succ l?28) cts.I)) =>
  x:(cts.Term l?28 A) =>
  y:(cts.Term l?28 A) =>
  cts.prod
    (cts.max l?28 (cts.succ l?15))
    l?15
    (cts.max (cts.max l?28 (cts.succ l?15)) l?15)
    cts.I
    (cts.prod
       l?28
       (cts.succ l?15)
       (cts.max l?28 (cts.succ l?15))
       cts.I
       A
       (x0 => cts.univ l?15 (cts.succ l?15) cts.I))
    (x0 => cts.prod l?15 l?15 l?15 cts.I (x0 x) (x1 => x0 y)).

