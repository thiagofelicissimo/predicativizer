equal_leibniz :  (l?12 : cts.Sort) -> (l?17 : cts.Sort) ->
  cts.Term
    (cts.max (cts.succ l?12) (cts.max l?12 (cts.max l?12 (cts.max l?12 (cts.max (cts.max l?12 (cts.succ l?17)) l?17)))))
    (cts.prod
       (cts.succ l?12)
       (cts.max l?12 (cts.max l?12 (cts.max l?12 (cts.max (cts.max l?12 (cts.succ l?17)) l?17))))
       (cts.max (cts.succ l?12) (cts.max l?12 (cts.max l?12 (cts.max l?12 (cts.max (cts.max l?12 (cts.succ l?17)) l?17)))))
       cts.I
       (cts.univ l?12 (cts.succ l?12) cts.I)
       (x =>
        cts.prod
          l?12
          (cts.max l?12 (cts.max l?12 (cts.max (cts.max l?12 (cts.succ l?17)) l?17)))
          (cts.max l?12 (cts.max l?12 (cts.max l?12 (cts.max (cts.max l?12 (cts.succ l?17)) l?17))))
          cts.I
          x
          (x0 =>
           cts.prod
             l?12
             (cts.max l?12 (cts.max (cts.max l?12 (cts.succ l?17)) l?17))
             (cts.max l?12 (cts.max l?12 (cts.max (cts.max l?12 (cts.succ l?17)) l?17)))
             cts.I
             x
             (x1 =>
              cts.prod
                l?12
                (cts.max (cts.max l?12 (cts.succ l?17)) l?17)
                (cts.max l?12 (cts.max (cts.max l?12 (cts.succ l?17)) l?17))
                cts.I
                (equal.equal l?12 x x0 x1)
                (x2 =>
                 cts.prod
                   (cts.max l?12 (cts.succ l?17))
                   l?17
                   (cts.max (cts.max l?12 (cts.succ l?17)) l?17)
                   cts.I
                   (cts.prod
                      l?12
                      (cts.succ l?17)
                      (cts.max l?12 (cts.succ l?17))
                      cts.I
                      x
                      (x3 => cts.univ l?17 (cts.succ l?17) cts.I))
                   (x3 =>
                    cts.prod
                      l?17
                      l?17
                      l?17
                      cts.I
                      (x3 x0)
                      (x4 => x3 x1))))))).

