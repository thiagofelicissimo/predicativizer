def not_divides_to_dividesb_false :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (lt.lt O.O x)
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (Not.Not (divides.divides x x0))
                (x2 => eq.eq bool.bool (dividesb.dividesb x x0) false.false)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  posn:(cts.Term cts.star (lt.lt O.O n)) =>
  match_Or_prop.match_Or_prop
    (eq.eq bool.bool (dividesb.dividesb n m) true.true)
    (eq.eq bool.bool (dividesb.dividesb n m) false.false)
    (cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (Not.Not (divides.divides n m))
       (x => eq.eq bool.bool (dividesb.dividesb n m) false.false))
    (divbnm:(cts.Term cts.star (eq.eq bool.bool (dividesb.dividesb n m) true.true)) =>
     ndivnm:(cts.Term cts.star (Not.Not (divides.divides n m))) =>
     falsity.falsity
       (eq.eq bool.bool (dividesb.dividesb n m) false.false)
       (absurd.absurd
          (divides.divides n m)
          (dividesb_true_to_divides.dividesb_true_to_divides
             n
             m
             (rewrite_r.rewrite_r
                bool.bool
                true.true
                (__:(cts.Term cts.box bool.bool) => eq.eq bool.bool __ true.true)
                (refl.refl bool.bool true.true)
                (dividesb.dividesb n m)
                divbnm))
          ndivnm))
    (auto:(cts.Term cts.star (eq.eq bool.bool (dividesb.dividesb n m) false.false)) =>
     auto':(cts.Term cts.star (Not.Not (divides.divides n m))) =>
     rewrite_r.rewrite_r
       bool.bool
       false.false
       (__:(cts.Term cts.box bool.bool) => eq.eq bool.bool __ false.false)
       (refl.refl bool.bool false.false)
       (dividesb.dividesb n m)
       auto)
    (true_or_false.true_or_false (dividesb.dividesb n m)).

