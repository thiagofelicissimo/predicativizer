def divides_to_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (lt.lt O.O x0)
             (x1 =>
              cts.prod cts.star cts.star cts.star cts.I (divides.divides x x0) (x2 => le.le x x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  posm:(cts.Term cts.star (lt.lt O.O m)) =>
  _clearme:(cts.Term cts.star (divides.divides n m)) =>
  match_divides_prop.match_divides_prop
    n
    m
    (le.le n m)
    (d:(cts.Term cts.box nat.nat) =>
     match_nat_prop.match_nat_prop
       (__:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (eq.eq nat.nat m (times.times n __))
          (x => le.le n m))
       (eqm:(cts.Term cts.star (eq.eq nat.nat m (times.times n O.O))) =>
        falsity.falsity
          (le.le n m)
          (absurd.absurd
             (le.le (S.S m) O.O)
             (eq_coerc.eq_coerc
                (le.le (S.S O.O) m)
                (le.le (S.S m) O.O)
                posm
                (rewrite_l.rewrite_l
                   nat.nat
                   m
                   (__:(cts.Term cts.box nat.nat) =>
                    eq.eq
                      (cts.univ cts.star cts.box cts.I)
                      (le.le (S.S __) m)
                      (le.le (S.S m) O.O))
                   (rewrite_l.rewrite_l
                      nat.nat
                      m
                      (__:(cts.Term cts.box nat.nat) =>
                       eq.eq
                         (cts.univ cts.star cts.box cts.I)
                         (le.le (S.S m) m)
                         (le.le (S.S m) __))
                      (refl.refl (cts.univ cts.star cts.box cts.I) (le.le (S.S m) m))
                      O.O
                      (let_clause_1531.let_clause_1531 n m posm _clearme d eqm))
                   O.O
                   (let_clause_1531.let_clause_1531 n m posm _clearme d eqm)))
             (not_le_Sn_O.not_le_Sn_O m)))
       (p:(cts.Term cts.box nat.nat) =>
        eqm:(cts.Term cts.star (eq.eq nat.nat m (times.times n (S.S p)))) =>
        eq_ind_r.eq_ind_r
          nat.nat
          (times.times n (S.S p))
          (x:(cts.Term cts.box nat.nat) => le.le n x)
          (eq_coerc.eq_coerc
             (le.le n (plus.plus n (times.times n p)))
             (le.le n (times.times n (S.S p)))
             (le_plus_n_r.le_plus_n_r (times.times n p) n)
             (rewrite_l.rewrite_l
                nat.nat
                (plus.plus n (times.times n p))
                (__:(cts.Term cts.box nat.nat) =>
                 eq.eq
                   (cts.univ cts.star cts.box cts.I)
                   (le.le n (plus.plus n (times.times n p)))
                   (le.le n __))
                (rewrite_l.rewrite_l
                   nat.nat
                   m
                   (__:(cts.Term cts.box nat.nat) =>
                    eq.eq
                      (cts.univ cts.star cts.box cts.I)
                      (le.le n (plus.plus n (times.times n p)))
                      (le.le n __))
                   (rewrite_l.rewrite_l
                      nat.nat
                      m
                      (__:(cts.Term cts.box nat.nat) =>
                       eq.eq (cts.univ cts.star cts.box cts.I) (le.le n __) (le.le n m))
                      (refl.refl (cts.univ cts.star cts.box cts.I) (le.le n m))
                      (plus.plus n (times.times n p))
                      (let_clause_15311.let_clause_15311 n m posm _clearme d p eqm))
                   (plus.plus n (times.times n p))
                   (let_clause_15311.let_clause_15311 n m posm _clearme d p eqm))
                (times.times n (S.S p))
                (times_n_Sm.times_n_Sm n p)))
          m
          eqm)
       d)
    _clearme.

