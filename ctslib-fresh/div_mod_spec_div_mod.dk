def div_mod_spec_div_mod :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (lt.lt O.O x0)
             (x1 => div_mod_spec.div_mod_spec x x0 (div.div x x0) (mod.mod x x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  posm:(cts.Term cts.star (lt.lt O.O m)) =>
  div_mod_spec_intro.div_mod_spec_intro
    n
    m
    (div.div n m)
    (mod.mod n m)
    (lt_mod_m_m.lt_mod_m_m n m posm)
    (rewrite_r.rewrite_r
       nat.nat
       (times.times m (div.div n m))
       (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat n (plus.plus __ (mod.mod n m)))
       (rewrite_r.rewrite_r
          nat.nat
          (plus.plus (mod.mod n m) (times.times m (div.div n m)))
          (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat n __)
          (rewrite_l.rewrite_l
             nat.nat
             n
             (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat n __)
             (refl.refl nat.nat n)
             (plus.plus (mod.mod n m) (times.times m (div.div n m)))
             (rewrite_l.rewrite_l
                nat.nat
                (plus.plus (times.times m (div.div n m)) (mod.mod n m))
                (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat n __)
                (rewrite_l.rewrite_l
                   nat.nat
                   (times.times (div.div n m) m)
                   (__:(cts.Term cts.box nat.nat) =>
                    eq.eq nat.nat n (plus.plus __ (mod.mod n m)))
                   (div_mod.div_mod n m)
                   (times.times m (div.div n m))
                   (commutative_times.commutative_times (div.div n m) m))
                (plus.plus (mod.mod n m) (times.times m (div.div n m)))
                (commutative_plus.commutative_plus (times.times m (div.div n m)) (mod.mod n m))))
          (plus.plus (times.times m (div.div n m)) (mod.mod n m))
          (commutative_plus.commutative_plus (times.times m (div.div n m)) (mod.mod n m)))
       (times.times (div.div n m) m)
       (commutative_times.commutative_times (div.div n m) m)).

