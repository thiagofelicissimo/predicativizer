def trans_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1 =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                x
                (x2 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (eq.eq x x0 x1)
                   (x3 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (eq.eq x x1 x2)
                      (x4 => eq.eq x x0 x2)))))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  x:(cts.Term cts.box A) =>
  y:(cts.Term cts.box A) =>
  z:(cts.Term cts.box A) =>
  H1:(cts.Term cts.star (eq.eq A x y)) =>
  H2:(cts.Term cts.star (eq.eq A y z)) =>
  eq_ind_r.eq_ind_r
    A
    y
    (x0:(cts.Term cts.box A) => eq.eq A x0 z)
    (rewrite_l.rewrite_l
       A
       x
       (__:(cts.Term cts.box A) => eq.eq A __ z)
       (rewrite_l.rewrite_l
          A
          x
          (__:(cts.Term cts.box A) => eq.eq A x __)
          (refl.refl A x)
          z
          (rewrite_r.rewrite_r A y (__:(cts.Term cts.box A) => eq.eq A __ z) H2 x H1))
       y
       H1)
    x
    H1.

