def monotonic_le_plus_l :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x => monotonic.monotonic nat.nat le.le (n:(cts.Term cts.box nat.nat) => plus.plus n x)))
  :=
  m:(cts.Term cts.box nat.nat) =>
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (le.le x y)) =>
  eq_coerc.eq_coerc
    (le.le (plus.plus m x) (plus.plus m y))
    (le.le (plus.plus x m) (plus.plus y m))
    (monotonic_le_plus_r.monotonic_le_plus_r m x y auto)
    (rewrite_r.rewrite_r
       nat.nat
       (plus.plus m x)
       (__:(cts.Term cts.box nat.nat) =>
        eq.eq
          (cts.univ cts.star cts.box cts.I)
          (le.le (plus.plus m x) (plus.plus m y))
          (le.le __ (plus.plus y m)))
       (rewrite_r.rewrite_r
          nat.nat
          (plus.plus m y)
          (__:(cts.Term cts.box nat.nat) =>
           eq.eq
             (cts.univ cts.star cts.box cts.I)
             (le.le (plus.plus m x) (plus.plus m y))
             (le.le (plus.plus m x) __))
          (refl.refl (cts.univ cts.star cts.box cts.I) (le.le (plus.plus m x) (plus.plus m y)))
          (plus.plus y m)
          (commutative_plus.commutative_plus y m))
       (plus.plus x m)
       (commutative_plus.commutative_plus x m)).

