def lt_to_le_to_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (lt.lt x x0)
                (x2 => cts.prod cts.star cts.star cts.star cts.I (le.le x0 x1) (x3 => lt.lt x x1))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (lt.lt n m)) =>
  H1:(cts.Term cts.star (le.le m p)) =>
  le_ind.le_ind
    m
    (x_417:(cts.Term cts.box nat.nat) => lt.lt n x_417)
    H
    (m0:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (le.le m m0)) =>
     _x_421:(cts.Term cts.star (lt.lt n m0)) =>
     transitive_lt.transitive_lt
       n
       m0
       (S.S m0)
       _x_421
       (eq_coerc.eq_coerc
          (le.le (S.S m0) (plus.plus O.O (S.S m0)))
          (le.le (S.S m0) (S.S m0))
          (le_plus_n.le_plus_n O.O (S.S m0))
          (rewrite_l.rewrite_l
             nat.nat
             (S.S m0)
             (__:(cts.Term cts.box nat.nat) =>
              eq.eq
                (cts.univ cts.star cts.box cts.I)
                (le.le (S.S m0) __)
                (le.le (S.S m0) (S.S m0)))
             (refl.refl (cts.univ cts.star cts.box cts.I) (le.le (S.S m0) (S.S m0)))
             (plus.plus O.O (S.S m0))
             (plus_O_n.plus_O_n (S.S m0)))))
    p
    H1.

