def divides_to_congruent :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (lt.lt O.O x1)
                (x2 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (le.le x0 x)
                   (x3 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (divides.divides x1 (minus.minus x x0))
                      (x4 => congruent.congruent x x0 x1)))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  posp:(cts.Term cts.star (lt.lt O.O p)) =>
  lemn:(cts.Term cts.star (le.le m n)) =>
  _clearme:(cts.Term cts.star (divides.divides p (minus.minus n m))) =>
  match_divides_prop.match_divides_prop
    p
    (minus.minus n m)
    (congruent.congruent n m p)
    (q:(cts.Term cts.box nat.nat) =>
     Hdiv:(cts.Term cts.star (eq.eq nat.nat (minus.minus n m) (times.times p q))) =>
     eq_times_plus_to_congruent.eq_times_plus_to_congruent
       n
       m
       p
       q
       posp
       (eq_ind_r.eq_ind_r
          nat.nat
          (plus.plus m (times.times q p))
          (x:(cts.Term cts.box nat.nat) => eq.eq nat.nat n x)
          (minus_to_plus.minus_to_plus
             n
             m
             (times.times q p)
             lemn
             (rewrite_r.rewrite_r
                nat.nat
                (times.times p q)
                (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat __ (times.times q p))
                (rewrite_r.rewrite_r
                   nat.nat
                   (times.times p q)
                   (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat (times.times p q) __)
                   (refl.refl nat.nat (times.times p q))
                   (times.times q p)
                   (commutative_times.commutative_times q p))
                (minus.minus n m)
                Hdiv))
          (plus.plus (times.times q p) m)
          (commutative_plus.commutative_plus (times.times q p) m)))
    _clearme.

