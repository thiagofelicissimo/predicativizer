def minus_to_plus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (le.le x0 x)
                (x2 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (eq.eq nat.nat (minus.minus x x0) x1)
                   (x3 => eq.eq nat.nat x (plus.plus x0 x1)))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  lemn:(cts.Term cts.star (le.le m n)) =>
  eqp:(cts.Term cts.star (eq.eq nat.nat (minus.minus n m) p)) =>
  eq_coerc.eq_coerc
    (eq.eq nat.nat n (plus.plus (minus.minus n m) m))
    (eq.eq nat.nat n (plus.plus m p))
    (plus_minus_m_m.plus_minus_m_m n m lemn)
    (rewrite_r.rewrite_r
       nat.nat
       (plus.plus m (minus.minus n m))
       (__:(cts.Term cts.box nat.nat) =>
        eq.eq
          (cts.univ cts.star cts.box cts.I)
          (eq.eq nat.nat n __)
          (eq.eq nat.nat n (plus.plus m p)))
       (rewrite_r.rewrite_r
          nat.nat
          p
          (__:(cts.Term cts.box nat.nat) =>
           eq.eq
             (cts.univ cts.star cts.box cts.I)
             (eq.eq nat.nat n (plus.plus m __))
             (eq.eq nat.nat n (plus.plus m p)))
          (refl.refl (cts.univ cts.star cts.box cts.I) (eq.eq nat.nat n (plus.plus m p)))
          (minus.minus n m)
          eqp)
       (plus.plus (minus.minus n m) m)
       (commutative_plus.commutative_plus (minus.minus n m) m)).

