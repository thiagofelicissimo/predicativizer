def bijn_n_Sn :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (bijn.bijn x x0)
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (eq.eq nat.nat (x (S.S x0)) (S.S x0))
                (x2 => bijn.bijn x (S.S x0))))))
  :=
  f:(cts.Term cts.box (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))) =>
  n:(cts.Term cts.box nat.nat) =>
  bijf:(cts.Term cts.star (bijn.bijn f n)) =>
  fS:(cts.Term cts.star (eq.eq nat.nat (f (S.S n)) (S.S n))) =>
  i:(cts.Term cts.box nat.nat) =>
  lein:(cts.Term cts.star (le.le i (S.S n))) =>
  match_Or_prop.match_Or_prop
    (lt.lt i (S.S n))
    (eq.eq nat.nat i (S.S n))
    (ex.ex
       nat.nat
       (p:(cts.Term cts.box nat.nat) => And.And (le.le p (S.S n)) (eq.eq nat.nat (f p) i)))
    (Hi:(cts.Term cts.star (lt.lt i (S.S n))) =>
     match_ex_prop.match_ex_prop
       nat.nat
       (p:(cts.Term cts.box nat.nat) => And.And (le.le p n) (eq.eq nat.nat (f p) i))
       (ex.ex
          nat.nat
          (p:(cts.Term cts.box nat.nat) => And.And (le.le p (S.S n)) (eq.eq nat.nat (f p) i)))
       (a:(cts.Term cts.box nat.nat) =>
        _clearme:(cts.Term cts.star (And.And (le.le a n) (eq.eq nat.nat (f a) i))) =>
        match_And_prop.match_And_prop
          (le.le a n)
          (eq.eq nat.nat (f a) i)
          (ex.ex
             nat.nat
             (p:(cts.Term cts.box nat.nat) => And.And (le.le p (S.S n)) (eq.eq nat.nat (f p) i)))
          (lean:(cts.Term cts.star (le.le a n)) =>
           fa:(cts.Term cts.star (eq.eq nat.nat (f a) i)) =>
           ex_intro.ex_intro
             nat.nat
             (x:(cts.Term cts.box nat.nat) => And.And (le.le x (S.S n)) (eq.eq nat.nat (f x) i))
             a
             (conj.conj
                (le.le a (S.S n))
                (eq.eq nat.nat (f a) i)
                (le_S.le_S a n lean)
                (rewrite_r.rewrite_r
                   nat.nat
                   i
                   (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat __ i)
                   (refl.refl nat.nat i)
                   (f a)
                   fa)))
          _clearme)
       (bijf i (le_S_S_to_le.le_S_S_to_le i n Hi)))
    (Hi:(cts.Term cts.star (eq.eq nat.nat i (S.S n))) =>
     ex_intro.ex_intro
       nat.nat
       (x:(cts.Term cts.box nat.nat) => And.And (le.le x (S.S n)) (eq.eq nat.nat (f x) i))
       i
       (conj.conj
          (le.le i (S.S n))
          (eq.eq nat.nat (f i) i)
          (eq_coerc.eq_coerc
             (le.le i i)
             (le.le i (S.S n))
             (le_n.le_n i)
             (rewrite_l.rewrite_l
                nat.nat
                i
                (__:(cts.Term cts.box nat.nat) =>
                 eq.eq (cts.univ cts.star cts.box cts.I) (le.le i i) (le.le i __))
                (refl.refl (cts.univ cts.star cts.box cts.I) (le.le i i))
                (S.S n)
                Hi))
          (rewrite_r.rewrite_r
             nat.nat
             i
             (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat __ i)
             (refl.refl nat.nat i)
             (f i)
             (rewrite_r.rewrite_r
                nat.nat
                (S.S n)
                (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat (f i) __)
                (rewrite_r.rewrite_r
                   nat.nat
                   (S.S n)
                   (__:(cts.Term cts.box nat.nat) => eq.eq nat.nat (f __) (S.S n))
                   fS
                   i
                   Hi)
                i
                Hi))))
    (le_to_or_lt_eq.le_to_or_lt_eq i (S.S n) lein).

