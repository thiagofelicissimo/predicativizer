def injective_ :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x =>
        cts.prod
          cts.triangle
          cts.box
          cts.diamond
          cts.I
          (cts.univ cts.box cts.triangle cts.I)
          (x0 =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I x (x1 => x0))
             (x1 => cts.univ cts.star cts.box cts.I))))
  :=
  A:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  B:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
  f:(cts.Term cts.box (cts.prod cts.box cts.box cts.box cts.I A (x => B))) =>
  cts.prod
    cts.box
    cts.star
    cts.star
    cts.I
    A
    (x =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       A
       (x0 => cts.prod cts.star cts.star cts.star cts.I (eq.eq B (f x) (f x0)) (x1 => eq.eq A x x0))).

