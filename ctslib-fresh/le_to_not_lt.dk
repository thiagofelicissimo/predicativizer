def le_to_not_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod cts.star cts.star cts.star cts.I (le.le x x0) (x1 => Not.Not (lt.lt x0 x)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (le.le n m)) =>
  lt_to_not_le.lt_to_not_le
    n
    (S.S m)
    (le_to_lt_to_lt.le_to_lt_to_lt
       n
       m
       (S.S m)
       H
       (eq_coerc.eq_coerc
          (le.le (S.S m) (plus.plus O.O (S.S m)))
          (le.le (S.S m) (S.S m))
          (le_plus_n.le_plus_n O.O (S.S m))
          (rewrite_l.rewrite_l
             nat.nat
             (S.S m)
             (__:(cts.Term cts.box nat.nat) =>
              eq.eq (cts.univ cts.star cts.box cts.I) (le.le (S.S m) __) (le.le (S.S m) (S.S m)))
             (refl.refl (cts.univ cts.star cts.box cts.I) (le.le (S.S m) (S.S m)))
             (plus.plus O.O (S.S m))
             (plus_O_n.plus_O_n (S.S m))))).

