def eq_to_bijn :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))
          (x0 =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x2 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (le.le x2 x1)
                      (x3 => eq.eq nat.nat (x x2) (x0 x2))))
                (x2 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (bijn.bijn x x1)
                   (x3 => bijn.bijn x0 x1))))))
  :=
  f:(cts.Term cts.box (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))) =>
  g:(cts.Term cts.box (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))) =>
  n:(cts.Term cts.box nat.nat) =>
  H:(cts.Term
       cts.star
       (cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (le.le x n)
             (x0 => eq.eq nat.nat (f x) (g x))))) =>
  bijf:(cts.Term cts.star (bijn.bijn f n)) =>
  i:(cts.Term cts.box nat.nat) =>
  lein:(cts.Term cts.star (le.le i n)) =>
  match_ex_prop.match_ex_prop
    nat.nat
    (p:(cts.Term cts.box nat.nat) => And.And (le.le p n) (eq.eq nat.nat (f p) i))
    (ex.ex nat.nat (p:(cts.Term cts.box nat.nat) => And.And (le.le p n) (eq.eq nat.nat (g p) i)))
    (a:(cts.Term cts.box nat.nat) =>
     _clearme:(cts.Term cts.star (And.And (le.le a n) (eq.eq nat.nat (f a) i))) =>
     match_And_prop.match_And_prop
       (le.le a n)
       (eq.eq nat.nat (f a) i)
       (ex.ex nat.nat (p:(cts.Term cts.box nat.nat) => And.And (le.le p n) (eq.eq nat.nat (g p) i)))
       (lean:(cts.Term cts.star (le.le a n)) =>
        fa:(cts.Term cts.star (eq.eq nat.nat (f a) i)) =>
        ex_intro.ex_intro
          nat.nat
          (x:(cts.Term cts.box nat.nat) => And.And (le.le x n) (eq.eq nat.nat (g x) i))
          a
          (conj.conj
             (le.le a n)
             (eq.eq nat.nat (g a) i)
             lean
             (eq_ind.eq_ind
                nat.nat
                (f a)
                (x_1:(cts.Term cts.box nat.nat) => eq.eq nat.nat (g a) x_1)
                (sym_eq.sym_eq nat.nat (f a) (g a) (H a lean))
                i
                fa)))
       _clearme)
    (bijf i lein).

