def le_to_le_to_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0 =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (le.le x x0)
             (x1 =>
              cts.prod cts.star cts.star cts.star cts.I (le.le x0 x) (x2 => eq.eq nat.nat x x0)))))
  :=
  nat_elim2.nat_elim2
    (__:(cts.Term cts.box nat.nat) =>
     _0:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (le.le __ _0)
       (x => cts.prod cts.star cts.star cts.star cts.I (le.le _0 __) (x0 => eq.eq nat.nat __ _0)))
    (n:(cts.Term cts.box nat.nat) =>
     auto:(cts.Term cts.star (le.le O.O n)) =>
     auto':(cts.Term cts.star (le.le n O.O)) =>
     sym_eq.sym_eq
       nat.nat
       n
       O.O
       (sym_eq.sym_eq
          nat.nat
          O.O
          n
          (eq_coerc.eq_coerc
             (eq.eq nat.nat O.O n)
             (eq.eq nat.nat O.O n)
             (le_n_O_to_eq.le_n_O_to_eq n auto')
             (refl.refl (cts.univ cts.star cts.box cts.I) (eq.eq nat.nat O.O n)))))
    (n:(cts.Term cts.box nat.nat) =>
     auto:(cts.Term cts.star (le.le (S.S n) O.O)) =>
     auto':(cts.Term cts.star (le.le O.O (S.S n))) =>
     sym_eq.sym_eq nat.nat O.O (S.S n) (le_n_O_to_eq.le_n_O_to_eq (S.S n) auto))
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     auto:(cts.Term
             cts.star
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (le.le n m)
                (x =>
                 cts.prod cts.star cts.star cts.star cts.I (le.le m n) (x0 => eq.eq nat.nat n m)))) =>
     auto':(cts.Term cts.star (le.le (S.S n) (S.S m))) =>
     auto'':(cts.Term cts.star (le.le (S.S m) (S.S n))) =>
     eq_f.eq_f
       nat.nat
       nat.nat
       S.S
       n
       m
       (auto
          (eq_coerc.eq_coerc
             (le.le (pred.pred (S.S n)) (pred.pred (S.S m)))
             (le.le n m)
             (monotonic_pred.monotonic_pred (S.S n) (S.S m) auto')
             (rewrite_l.rewrite_l
                nat.nat
                n
                (__:(cts.Term cts.box nat.nat) =>
                 eq.eq
                   (cts.univ cts.star cts.box cts.I)
                   (le.le __ (pred.pred (S.S m)))
                   (le.le n m))
                (rewrite_l.rewrite_l
                   nat.nat
                   m
                   (__:(cts.Term cts.box nat.nat) =>
                    eq.eq (cts.univ cts.star cts.box cts.I) (le.le n __) (le.le n m))
                   (refl.refl (cts.univ cts.star cts.box cts.I) (le.le n m))
                   (pred.pred (S.S m))
                   (pred_Sn.pred_Sn m))
                (pred.pred (S.S n))
                (pred_Sn.pred_Sn n)))
          (eq_coerc.eq_coerc
             (le.le (pred.pred (S.S m)) (pred.pred (S.S n)))
             (le.le m n)
             (monotonic_pred.monotonic_pred (S.S m) (S.S n) auto'')
             (rewrite_l.rewrite_l
                nat.nat
                m
                (__:(cts.Term cts.box nat.nat) =>
                 eq.eq
                   (cts.univ cts.star cts.box cts.I)
                   (le.le __ (pred.pred (S.S n)))
                   (le.le m n))
                (rewrite_l.rewrite_l
                   nat.nat
                   n
                   (__:(cts.Term cts.box nat.nat) =>
                    eq.eq (cts.univ cts.star cts.box cts.I) (le.le m __) (le.le m n))
                   (refl.refl (cts.univ cts.star cts.box cts.I) (le.le m n))
                   (pred.pred (S.S n))
                   (pred_Sn.pred_Sn n))
                (pred.pred (S.S m))
                (pred_Sn.pred_Sn m))))).

