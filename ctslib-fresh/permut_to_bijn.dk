def permut_to_bijn :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0 => nat.nat))
          (x0 =>
           cts.prod cts.star cts.star cts.star cts.I (permut.permut x0 x) (x1 => bijn.bijn x0 x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat_ind.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))
       (x =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (permut.permut x _x_365)
          (x0 => bijn.bijn x _x_365)))
    (f:(cts.Term cts.box (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))) =>
     _clearme:(cts.Term
                 cts.star
                 (And.And
                    (cts.prod
                       cts.box
                       cts.star
                       cts.star
                       cts.I
                       nat.nat
                       (x =>
                        cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (le.le x O.O)
                          (x0 => le.le (f x) O.O)))
                    (cts.prod
                       cts.box
                       cts.star
                       cts.star
                       cts.I
                       nat.nat
                       (x =>
                        cts.prod
                          cts.box
                          cts.star
                          cts.star
                          cts.I
                          nat.nat
                          (x0 =>
                           cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (le.le x O.O)
                             (x1 =>
                              cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (le.le x0 O.O)
                                (x2 =>
                                 cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (eq.eq nat.nat (f x) (f x0))
                                   (x3 => eq.eq nat.nat x x0)))))))) =>
     match_And_prop.match_And_prop
       (cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x => cts.prod cts.star cts.star cts.star cts.I (le.le x O.O) (x0 => le.le (f x) O.O)))
       (cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x0 =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (le.le x O.O)
                (x1 =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (le.le x0 O.O)
                   (x2 =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (eq.eq nat.nat (f x) (f x0))
                      (x3 => eq.eq nat.nat x x0))))))
       (cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (le.le x O.O)
             (x0 =>
              ex.ex
                nat.nat
                (p:(cts.Term cts.box nat.nat) => And.And (le.le p O.O) (eq.eq nat.nat (f p) x)))))
       (H:(cts.Term
             cts.star
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (le.le x O.O)
                   (x0 => le.le (f x) O.O)))) =>
        H1:(cts.Term
              cts.star
              (cts.prod
                 cts.box
                 cts.star
                 cts.star
                 cts.I
                 nat.nat
                 (x =>
                  cts.prod
                    cts.box
                    cts.star
                    cts.star
                    cts.I
                    nat.nat
                    (x0 =>
                     cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (le.le x O.O)
                       (x1 =>
                        cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (le.le x0 O.O)
                          (x2 =>
                           cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (eq.eq nat.nat (f x) (f x0))
                             (x3 => eq.eq nat.nat x x0))))))) =>
        m:(cts.Term cts.box nat.nat) =>
        lem0:(cts.Term cts.star (le.le m O.O)) =>
        ex_intro.ex_intro
          nat.nat
          (x:(cts.Term cts.box nat.nat) => And.And (le.le x O.O) (eq.eq nat.nat (f x) m))
          O.O
          (conj.conj
             (le.le O.O O.O)
             (eq.eq nat.nat (f O.O) m)
             (le_O_n.le_O_n O.O)
             (le_n_O_elim.le_n_O_elim
                m
                lem0
                (eq.eq nat.nat (f O.O))
                (sym_eq.sym_eq
                   nat.nat
                   O.O
                   (f O.O)
                   (le_n_O_to_eq.le_n_O_to_eq (f O.O) (H O.O (le_O_n.le_O_n O.O)))))))
       _clearme)
    (m:(cts.Term cts.box nat.nat) =>
     Hind:(cts.Term
             cts.star
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))
                (x =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (permut.permut x m)
                   (x0 => bijn.bijn x m)))) =>
     f:(cts.Term cts.box (cts.prod cts.box cts.box cts.box cts.I nat.nat (x => nat.nat))) =>
     permf:(cts.Term cts.star (permut.permut f (S.S m))) =>
     eq_to_bijn.eq_to_bijn
       (p:(cts.Term cts.box nat.nat) =>
        transpose.transpose (f (S.S m)) (S.S m) (transpose.transpose (f (S.S m)) (S.S m) (f p)))
       f
       (S.S m)
       (i:(cts.Term cts.box nat.nat) =>
        lei:(cts.Term cts.star (le.le i (S.S m))) =>
        transpose_transpose.transpose_transpose (f (S.S m)) (S.S m) (f i))
       (bijn_fg.bijn_fg
          (transpose.transpose (f (S.S m)) (S.S m))
          (__:(cts.Term cts.box nat.nat) => transpose.transpose (f (S.S m)) (S.S m) (f __))
          (S.S m)
          (match_And_prop.match_And_prop
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (le.le x (S.S m))
                   (x0 => le.le (f x) (S.S m))))
             (injn.injn f (S.S m))
             (bijn.bijn (transpose.transpose (f (S.S m)) (S.S m)) (S.S m))
             (lef:(cts.Term
                     cts.star
                     (cts.prod
                        cts.box
                        cts.star
                        cts.star
                        cts.I
                        nat.nat
                        (x =>
                         cts.prod
                           cts.star
                           cts.star
                           cts.star
                           cts.I
                           (le.le x (S.S m))
                           (x0 => le.le (f x) (S.S m))))) =>
              __:(cts.Term cts.star (injn.injn f (S.S m))) =>
              bijn_transpose.bijn_transpose
                (S.S m)
                (f (S.S m))
                (S.S m)
                (lef (S.S m) (le_n.le_n (S.S m)))
                (le_n.le_n (S.S m)))
             permf)
          (bijn_n_Sn.bijn_n_Sn
             (__:(cts.Term cts.box nat.nat) => transpose.transpose (f (S.S m)) (S.S m) (f __))
             m
             (Hind
                (__:(cts.Term cts.box nat.nat) => transpose.transpose (f (S.S m)) (S.S m) (f __))
                (permut_S_to_permut_transpose.permut_S_to_permut_transpose f m permf))
             (eq_ind_r.eq_ind_r
                bool.bool
                true.true
                (x:(cts.Term cts.box bool.bool) =>
                 eq.eq
                   nat.nat
                   (match_bool_type.match_bool_type
                      nat.nat
                      (S.S m)
                      (match_bool_type.match_bool_type
                         nat.nat
                         (f (S.S m))
                         (f (S.S m))
                         (eqb.eqb (f (S.S m)) (S.S m)))
                      x)
                   (S.S m))
                (eq_match_bool_type_true.eq_match_bool_type_true
                   nat.nat
                   (S.S m)
                   (match_bool_type.match_bool_type
                      nat.nat
                      (f (S.S m))
                      (f (S.S m))
                      (eqb.eqb (f (S.S m)) (S.S m)))
                   (y:(cts.Term cts.box nat.nat) =>
                    eq.eq
                      nat.nat
                      (match_bool_type.match_bool_type
                         nat.nat
                         (S.S m)
                         (match_bool_type.match_bool_type
                            nat.nat
                            (f (S.S m))
                            (f (S.S m))
                            (eqb.eqb (f (S.S m)) (S.S m)))
                         true.true)
                      y)
                   (refl.refl
                      nat.nat
                      (match_bool_type.match_bool_type
                         nat.nat
                         (S.S m)
                         (match_bool_type.match_bool_type
                            nat.nat
                            (f (S.S m))
                            (f (S.S m))
                            (eqb.eqb (f (S.S m)) (S.S m)))
                         true.true)))
                (eqb.eqb (f (S.S m)) (f (S.S m)))
                (eqb_n_n.eqb_n_n (f (S.S m)))))))
    n.

